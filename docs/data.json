{
    "project": {
        "name": "taxi",
        "description": "Object-oriented Selenium WebDriver Client",
        "version": "0.2.7"
    },
    "files": {
        "lib/comparison/blinkdiff.js": {
            "name": "lib/comparison/blinkdiff.js",
            "modules": {},
            "classes": {
                "BlinkDiffComparison": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/compatibility/nightwatch.js": {
            "name": "lib/compatibility/nightwatch.js",
            "modules": {},
            "classes": {
                "Nightwatch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/helpers/comparison.js": {
            "name": "lib/helpers/comparison.js",
            "modules": {},
            "classes": {
                "Comparison": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/helpers/devicePixelRatio.js": {
            "name": "lib/helpers/devicePixelRatio.js",
            "modules": {},
            "classes": {
                "DevicePixelRatio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/helpers/screenshot.js": {
            "name": "lib/helpers/screenshot.js",
            "modules": {},
            "classes": {
                "Screenshot": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/helpers/stitching.js": {
            "name": "lib/helpers/stitching.js",
            "modules": {},
            "classes": {
                "Stitching": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/scripts/devicePixelRatio.js": {
            "name": "lib/scripts/devicePixelRatio.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/scripts/screenshot.js": {
            "name": "lib/scripts/screenshot.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/scripts/stitching.js": {
            "name": "lib/scripts/stitching.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/activeWindow.js": {
            "name": "lib/activeWindow.js",
            "modules": {},
            "classes": {
                "ActiveWindow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/alert.js": {
            "name": "lib/alert.js",
            "modules": {},
            "classes": {
                "Alert": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/browser.js": {
            "name": "lib/browser.js",
            "modules": {},
            "classes": {
                "Browser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/chain.js": {
            "name": "lib/chain.js",
            "modules": {
                "Chain": 1
            },
            "classes": {
                "Chain": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/compatibility.js": {
            "name": "lib/compatibility.js",
            "modules": {},
            "classes": {
                "Compatibility": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/connection.js": {
            "name": "lib/connection.js",
            "modules": {},
            "classes": {
                "Connection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/cookie.js": {
            "name": "lib/cookie.js",
            "modules": {},
            "classes": {
                "Cookie": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/cookieStorage.js": {
            "name": "lib/cookieStorage.js",
            "modules": {},
            "classes": {
                "CookieStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/docs.js": {
            "name": "lib/docs.js",
            "modules": {
                "WebDriver": 1,
                "Navigation": 1,
                "Core": 1,
                "System": 1,
                "Storage": 1,
                "Interaction": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/driver.js": {
            "name": "lib/driver.js",
            "modules": {},
            "classes": {
                "Driver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/element.js": {
            "name": "lib/element.js",
            "modules": {},
            "classes": {
                "Element": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/errors.js": {
            "name": "lib/errors.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/frame.js": {
            "name": "lib/frame.js",
            "modules": {},
            "classes": {
                "Frame": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/globalMouse.js": {
            "name": "lib/globalMouse.js",
            "modules": {},
            "classes": {
                "GlobalMouse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/globalTouch.js": {
            "name": "lib/globalTouch.js",
            "modules": {},
            "classes": {
                "GlobalTouch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ime.js": {
            "name": "lib/ime.js",
            "modules": {},
            "classes": {
                "IME": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/json.js": {
            "name": "lib/json.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/keys.js": {
            "name": "lib/keys.js",
            "modules": {},
            "classes": {
                "Keys": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/localStorage.js": {
            "name": "lib/localStorage.js",
            "modules": {},
            "classes": {
                "LocalStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/log.js": {
            "name": "lib/log.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/logEntry.js": {
            "name": "lib/logEntry.js",
            "modules": {},
            "classes": {
                "LogEntry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/mouse.js": {
            "name": "lib/mouse.js",
            "modules": {},
            "classes": {
                "Mouse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/navigator.js": {
            "name": "lib/navigator.js",
            "modules": {},
            "classes": {
                "Navigator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/session.js": {
            "name": "lib/session.js",
            "modules": {},
            "classes": {
                "Session": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/sessionStorage.js": {
            "name": "lib/sessionStorage.js",
            "modules": {},
            "classes": {
                "SessionStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/status.js": {
            "name": "lib/status.js",
            "modules": {},
            "classes": {
                "Status": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/timeOut.js": {
            "name": "lib/timeOut.js",
            "modules": {},
            "classes": {
                "TimeOut": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/touch.js": {
            "name": "lib/touch.js",
            "modules": {},
            "classes": {
                "Touch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/utils.js": {
            "name": "lib/utils.js",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/when.js": {
            "name": "lib/when.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/window.js": {
            "name": "lib/window.js",
            "modules": {},
            "classes": {
                "WindowHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {
                "taxi": 1
            },
            "classes": {
                "taxi": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "WebDriver": {
            "name": "WebDriver",
            "submodules": {
                "Helpers": 1,
                "Sequence": 1,
                "Navigation": 1,
                "Core": 1,
                "Compatibility": 1,
                "Storage": 1,
                "Interaction": 1,
                "Utils": 1
            },
            "classes": {
                "Compatibility": 1,
                "Cookie": 1,
                "BlinkDiffComparison": 1,
                "Nightwatch": 1,
                "Comparison": 1,
                "DevicePixelRatio": 1,
                "Screenshot": 1,
                "Stitching": 1,
                "ActiveWindow": 1,
                "Alert": 1,
                "Browser": 1,
                "CookieStorage": 1,
                "Driver": 1,
                "Element": 1,
                "Frame": 1,
                "GlobalMouse": 1,
                "GlobalTouch": 1,
                "IME": 1,
                "Keys": 1,
                "LocalStorage": 1,
                "LogEntry": 1,
                "Mouse": 1,
                "Navigator": 1,
                "Session": 1,
                "SessionStorage": 1,
                "Status": 1,
                "TimeOut": 1,
                "Touch": 1,
                "Utils": 1,
                "WindowHandler": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/window.js",
            "line": 9,
            "description": "Web-Driver objects",
            "itemtype": "main"
        },
        "Helpers": {
            "name": "Helpers",
            "submodules": {},
            "classes": {
                "BlinkDiffComparison": 1,
                "Comparison": 1,
                "DevicePixelRatio": 1,
                "Screenshot": 1,
                "Stitching": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "WebDriver",
            "namespace": "",
            "description": "Blink-Diff comparison object",
            "file": "lib/helpers/stitching.js",
            "line": 13
        },
        "Sequence": {
            "name": "Sequence",
            "submodules": {},
            "classes": {
                "Nightwatch": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "WebDriver",
            "namespace": "",
            "description": "Nightwatch execution for taxi",
            "file": "lib/compatibility/nightwatch.js",
            "line": 11
        },
        "Navigation": {
            "name": "Navigation",
            "submodules": {},
            "classes": {
                "ActiveWindow": 1,
                "Alert": 1,
                "Frame": 1,
                "Navigator": 1,
                "WindowHandler": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/window.js",
            "line": 9,
            "description": "Navigation classes",
            "tag": "main",
            "itemtype": "main"
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "classes": {
                "Browser": 1,
                "Driver": 1,
                "Element": 1,
                "Keys": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/keys.js",
            "line": 1,
            "description": "Core components of the system",
            "tag": "main",
            "itemtype": "main"
        },
        "Chain": {
            "name": "Chain",
            "submodules": {},
            "classes": {
                "Chain": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/chain.js",
            "line": 21,
            "description": "Taxi supports a chainable interface that is quick and easy to use.\nAt any time, you can switch over to the object-oriented interface\nto do more advanced tasks.\n\nSee the \"[Getting Started](https://github.com/preceptorjs/taxi/wiki/Chaining-Interface---Getting-Started)\"\ndocumentation for the Chain interface.",
            "itemtype": "main"
        },
        "Compatibility": {
            "name": "Compatibility",
            "submodules": {},
            "classes": {
                "Compatibility": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "WebDriver",
            "namespace": "",
            "description": "Compatibility execution for taxi",
            "file": "lib/compatibility.js",
            "line": 11
        },
        "System": {
            "name": "System",
            "submodules": {},
            "classes": {
                "Connection": 1,
                "LogEntry": 1,
                "Session": 1,
                "Status": 1,
                "TimeOut": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/timeOut.js",
            "line": 13,
            "description": "System classes - internals",
            "itemtype": "main",
            "module": "WebDriver"
        },
        "Storage": {
            "name": "Storage",
            "submodules": {},
            "classes": {
                "Cookie": 1,
                "CookieStorage": 1,
                "LocalStorage": 1,
                "SessionStorage": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/sessionStorage.js",
            "line": 8,
            "description": "Storage related classes",
            "tag": "main",
            "itemtype": "main"
        },
        "Interaction": {
            "name": "Interaction",
            "submodules": {},
            "classes": {
                "GlobalMouse": 1,
                "GlobalTouch": 1,
                "IME": 1,
                "Mouse": 1,
                "Touch": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/touch.js",
            "line": 9,
            "description": "Peripheral interactions",
            "tag": "main",
            "itemtype": "main"
        },
        "Utils": {
            "name": "Utils",
            "submodules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "WebDriver",
            "namespace": "",
            "description": "Utils for WebDriver tools",
            "file": "lib/utils.js",
            "line": 12
        },
        "taxi": {
            "name": "taxi",
            "submodules": {},
            "classes": {
                "taxi": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "index.js",
            "line": 30,
            "description": "Create a new browser session\n\n<img src=\"../../objectReference.png\" />\n\nNote: Remember to call `.dispose()` at the end to terminate the session."
        }
    },
    "classes": {
        "BlinkDiffComparison": {
            "name": "BlinkDiffComparison",
            "shortname": "BlinkDiffComparison",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "file": "lib/comparison/blinkdiff.js",
            "line": 17,
            "description": "Blink-Diff comparison object",
            "is_constructor": 1,
            "submodule": "Helpers",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Nightwatch": {
            "name": "Nightwatch",
            "shortname": "Nightwatch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/compatibility/nightwatch.js",
            "line": 11,
            "description": "Nightwatch execution for taxi",
            "is_constructor": 1,
            "submodule": "Sequence",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Comparison": {
            "name": "Comparison",
            "shortname": "Comparison",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/helpers/comparison.js",
            "line": 9,
            "description": "Comparison object",
            "is_constructor": 1,
            "submodule": "Helpers",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                },
                {
                    "name": "comparisonList",
                    "description": "List of tools to use for comparison",
                    "type": "String[]"
                }
            ]
        },
        "DevicePixelRatio": {
            "name": "DevicePixelRatio",
            "shortname": "DevicePixelRatio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/helpers/devicePixelRatio.js",
            "line": 13,
            "description": "Device-Pixel-Ratio object",
            "is_constructor": 1,
            "submodule": "Helpers",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Screenshot": {
            "name": "Screenshot",
            "shortname": "Screenshot",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/helpers/screenshot.js",
            "line": 14,
            "description": "Screenshot object",
            "is_constructor": 1,
            "submodule": "Helpers",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Stitching": {
            "name": "Stitching",
            "shortname": "Stitching",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/helpers/stitching.js",
            "line": 13,
            "description": "Stitching object",
            "is_constructor": 1,
            "submodule": "Helpers",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "ActiveWindow": {
            "name": "ActiveWindow",
            "shortname": "ActiveWindow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/activeWindow.js",
            "line": 24,
            "description": "Active window object",
            "is_constructor": 1,
            "submodule": "Navigation",
            "uses": [
                "WindowHandler"
            ],
            "extends": "WindowHandler",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "Alert": {
            "name": "Alert",
            "shortname": "Alert",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/alert.js",
            "line": 8,
            "description": "Alert window management\n\nHandles regular alerts, prompts, and confirms.",
            "is_constructor": 1,
            "submodule": "Navigation",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Browser": {
            "name": "Browser",
            "shortname": "Browser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/browser.js",
            "line": 15,
            "description": "Browser accessor class",
            "is_constructor": 1,
            "submodule": "Core",
            "params": [
                {
                    "name": "driver",
                    "description": "Driver object",
                    "type": "Driver"
                }
            ]
        },
        "Chain": {
            "name": "Chain",
            "shortname": "Chain",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Chain",
            "namespace": "",
            "file": "lib/chain.js",
            "line": 21,
            "description": "Chain Interface for Taxi\n\n##Missing a function?\nFile an [issue](https://github.com/preceptorjs/taxi/issues) with us or\ncreate your own function by doing something like this before a\nTaxi instance is created:\n\n```\ntaxi.Chain.prototype.elementClick = function (selector, button, callBack) {\n\n    // Find elements with the selector\n    return this.elements(selector, function (element) {\n\n        // Make sure that evaluation will work for sync and async mode\n        return this.driver().utils().when(\n\n            // Click on the selected element with the object-oriented API\n            element.mouse().click(button),\n\n            // When it is done, execute the callback function in the correct scope,\n            // additionally giving the element as its first parameter\n            function () {\n                return this._scopeCallBack(callBack, [element]);\n            }.bind(this)\n        );\n    }.bind(this));\n});\n```\n*Always make sure that you return the values along the way!*\n\nThis is a complete implementation of the `elementClick` function in this API.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "driver",
                    "description": "Taxi driver instance to communicate with the browser",
                    "type": "Driver"
                }
            ]
        },
        "Compatibility": {
            "name": "Compatibility",
            "shortname": "Compatibility",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/compatibility.js",
            "line": 11,
            "description": "Compatibility execution for taxi",
            "is_constructor": 1,
            "submodule": "Compatibility",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Connection": {
            "name": "Connection",
            "shortname": "Connection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "System",
            "namespace": "",
            "file": "lib/connection.js",
            "line": 18,
            "description": "Connection object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "remote",
                    "description": "",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mode",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "retry",
                            "description": "",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "3"
                        },
                        {
                            "name": "logDir",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "logScreen",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "Cookie": {
            "name": "Cookie",
            "shortname": "Cookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/cookie.js",
            "line": 8,
            "description": "Cookie data-structure",
            "is_constructor": 1,
            "submodule": "Storage",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "CookieStorage": {
            "name": "CookieStorage",
            "shortname": "CookieStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/cookieStorage.js",
            "line": 14,
            "description": "Managing cookie-storage",
            "is_constructor": 1,
            "submodule": "Storage",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Driver": {
            "name": "Driver",
            "shortname": "Driver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/driver.js",
            "line": 31,
            "description": "Create a new Driver session, remember to call `.dispose()`\nat the end to terminate the session.",
            "is_constructor": 1,
            "submodule": "Core",
            "params": [
                {
                    "name": "remote",
                    "description": "Request object or URL to selenium-server",
                    "type": "String|Object"
                },
                {
                    "name": "capabilities",
                    "description": "See capabilities in {{#crossLink \"Session\"}}{{/crossLink}}",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mode",
                            "description": "Mode of web-driver requests (Driver.MODE_SYNC|Driver.MODE_ASYNC)",
                            "type": "String"
                        },
                        {
                            "name": "base",
                            "description": "Base-url",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sessionID",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "logDir",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "logScreen",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "compare",
                            "description": "",
                            "type": "String|string[]",
                            "optional": true,
                            "optdefault": "'blinkDiff'"
                        }
                    ]
                }
            ]
        },
        "Element": {
            "name": "Element",
            "shortname": "Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/element.js",
            "line": 14,
            "description": "Object representing a DOM-Element",
            "is_constructor": 1,
            "submodule": "Core",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "Browser|Element"
                },
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "Frame": {
            "name": "Frame",
            "shortname": "Frame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/frame.js",
            "line": 9,
            "description": "Managing session-storage",
            "is_constructor": 1,
            "submodule": "Navigation",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "GlobalMouse": {
            "name": "GlobalMouse",
            "shortname": "GlobalMouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/globalMouse.js",
            "line": 11,
            "description": "Global mouse object handling global mouse commands",
            "is_constructor": 1,
            "submodule": "Interaction",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "GlobalTouch": {
            "name": "GlobalTouch",
            "shortname": "GlobalTouch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/globalTouch.js",
            "line": 8,
            "description": "Global touch object handling global touch commands",
            "is_constructor": 1,
            "submodule": "Interaction",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "IME": {
            "name": "IME",
            "shortname": "IME",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/ime.js",
            "line": 8,
            "description": "Input Method Editor object",
            "is_constructor": 1,
            "submodule": "Interaction",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Keys": {
            "name": "Keys",
            "shortname": "Keys",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/keys.js",
            "line": 1,
            "description": "Web-driver keys",
            "submodule": "Core"
        },
        "LocalStorage": {
            "name": "LocalStorage",
            "shortname": "LocalStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/localStorage.js",
            "line": 8,
            "description": "Managing local storage",
            "is_constructor": 1,
            "submodule": "Storage",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "LogEntry": {
            "name": "LogEntry",
            "shortname": "LogEntry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/logEntry.js",
            "line": 5,
            "description": "Remote log-entry",
            "is_constructor": 1,
            "submodule": "System",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Mouse": {
            "name": "Mouse",
            "shortname": "Mouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/mouse.js",
            "line": 9,
            "description": "Mouse commands relative to a DOM-element",
            "is_constructor": 1,
            "submodule": "Interaction",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "Element"
                }
            ]
        },
        "Navigator": {
            "name": "Navigator",
            "shortname": "Navigator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/navigator.js",
            "line": 9,
            "description": "Navigation object",
            "is_constructor": 1,
            "submodule": "Navigation",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Session": {
            "name": "Session",
            "shortname": "Session",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/session.js",
            "line": 8,
            "description": "Session entry",
            "is_constructor": 1,
            "submodule": "System",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "SessionStorage": {
            "name": "SessionStorage",
            "shortname": "SessionStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/sessionStorage.js",
            "line": 8,
            "description": "Managing session-storage",
            "is_constructor": 1,
            "submodule": "Storage",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Status": {
            "name": "Status",
            "shortname": "Status",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/status.js",
            "line": 5,
            "description": "Selenium status",
            "is_constructor": 1,
            "submodule": "System",
            "params": [
                {
                    "name": "values",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "TimeOut": {
            "name": "TimeOut",
            "shortname": "TimeOut",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/timeOut.js",
            "line": 13,
            "description": "Managing time-out",
            "is_constructor": 1,
            "submodule": "System",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "Touch": {
            "name": "Touch",
            "shortname": "Touch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/touch.js",
            "line": 9,
            "description": "Touch commands relative to a DOM-element",
            "is_constructor": 1,
            "submodule": "Interaction",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "Element"
                }
            ]
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/utils.js",
            "line": 12,
            "description": "Utils for WebDriver tools",
            "is_constructor": 1,
            "submodule": "Utils",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                }
            ]
        },
        "WindowHandler": {
            "name": "WindowHandler",
            "shortname": "WindowHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "ActiveWindow"
            ],
            "module": "WebDriver",
            "namespace": "",
            "file": "lib/window.js",
            "line": 9,
            "description": "Window object",
            "is_constructor": 1,
            "submodule": "Navigation",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "taxi": {
            "name": "taxi",
            "shortname": "taxi",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "taxi",
            "namespace": "",
            "file": "index.js",
            "line": 30,
            "description": "Create a new browser session\n\n<img src=\"../../objectReference.png\" />\n\nNote: Remember to call `.dispose()` at the end to terminate the session.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "remote",
                    "description": "Request object or URL to selenium-server",
                    "type": "String|Object"
                },
                {
                    "name": "capabilities",
                    "description": "See capabilities in {{#crossLink \"Session\"}}{{/crossLink}}",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mode",
                            "description": "Mode of web-driver requests (Browser.MODE_SYNC|Browser.MODE_ASYNC)",
                            "type": "String"
                        },
                        {
                            "name": "base",
                            "description": "Base-url",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sessionID",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "debug",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "httpDebug",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Driver"
            }
        }
    },
    "classitems": [
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 36,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 49,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 69,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getDriver",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 81,
            "description": "Gets the default comparison options",
            "itemtype": "method",
            "name": "getOptions",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 91,
            "description": "Should an output be created when comparison is successful?",
            "itemtype": "method",
            "name": "shouldOutputOnSuccess",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 108,
            "description": "Should an exception be thrown when there are differences?",
            "itemtype": "method",
            "name": "shouldFailOnDifference",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 125,
            "description": "Should screenshot be auto-approved?",
            "itemtype": "method",
            "name": "shouldAutoApprove",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 136,
            "description": "Batch failures until the end?",
            "itemtype": "method",
            "name": "shouldBatchFailures",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 146,
            "description": "Should comparison fail on additions?",
            "itemtype": "method",
            "name": "shouldFailOnAdditions",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 157,
            "description": "Gets the path where approved screenshots are found",
            "itemtype": "method",
            "name": "getApprovedPath",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 167,
            "description": "Gets the path where current screenshots will be written to",
            "itemtype": "method",
            "name": "getBuildPath",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 177,
            "description": "Gets the path where differences will be written to",
            "itemtype": "method",
            "name": "getDiffPath",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 187,
            "description": "Gets the name of the browser folder, categorizing screenshots from the same browser + platform",
            "itemtype": "method",
            "name": "_getFolderName",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 203,
            "description": "Gets the name of the file-base, converting unique identifiers to filename safe strings",
            "itemtype": "method",
            "name": "_getBaseName",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title of image",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Unique identifier for multiple images with the same title",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 217,
            "description": "Gets the approved path for the current image",
            "itemtype": "method",
            "name": "_getApprovedImagePath",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title of image",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Unique identifier for multiple images with the same title",
                    "type": "String",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 234,
            "description": "Gets the build path for the current image",
            "itemtype": "method",
            "name": "_getBuildImagePath",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title of image",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Unique identifier for multiple images with the same title",
                    "type": "String",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 251,
            "description": "Gets the difference path for the current image",
            "itemtype": "method",
            "name": "_getDiffImagePath",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title of image",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Unique identifier for multiple images with the same title",
                    "type": "String",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 268,
            "description": "Checks if a filename suffix is required for the approved folder\n\nNote:\nThis is only true if multiple file-types end up in the same folder",
            "itemtype": "method",
            "name": "_needsApprovedSuffix",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 286,
            "description": "Checks if a filename suffix is required for the build folder\n\nNote:\nThis is only true if multiple file-types end up in the same folder",
            "itemtype": "method",
            "name": "_needsBuildSuffix",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 304,
            "description": "Checks if a filename suffix is required for the diff folder\n\nNote:\nThis is only true if multiple file-types end up in the same folder",
            "itemtype": "method",
            "name": "_needsDiffSuffix",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 323,
            "description": "Saves a blob to the filesystem",
            "itemtype": "method",
            "name": "_saveBlob",
            "params": [
                {
                    "name": "filePath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "blob",
                    "description": "",
                    "type": "Buffer"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 340,
            "description": "Prepares all of the folders, creating them if needed",
            "itemtype": "method",
            "name": "_prepareFolders",
            "access": "private",
            "tagname": "",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 357,
            "description": "Compares a specific screenshot",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title of image",
                    "type": "String"
                },
                {
                    "name": "imageBlob",
                    "description": "Image buffer of current screenshot",
                    "type": "Buffer"
                },
                {
                    "name": "options",
                    "description": "Comparison options",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 427,
            "description": "Setup of comparison",
            "itemtype": "method",
            "name": "setup",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/comparison/blinkdiff.js",
            "line": 436,
            "description": "Tear-down of comparison",
            "itemtype": "method",
            "name": "tearDown",
            "class": "BlinkDiffComparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/compatibility/nightwatch.js",
            "line": 28,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Nightwatch",
            "module": "WebDriver",
            "submodule": "Sequence"
        },
        {
            "file": "lib/compatibility/nightwatch.js",
            "line": 41,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Nightwatch",
            "module": "WebDriver",
            "submodule": "Sequence"
        },
        {
            "file": "lib/compatibility/nightwatch.js",
            "line": 61,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Nightwatch",
            "module": "WebDriver",
            "submodule": "Sequence"
        },
        {
            "file": "lib/helpers/comparison.js",
            "line": 33,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Comparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/comparison.js",
            "line": 46,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Comparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/comparison.js",
            "line": 66,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Comparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/comparison.js",
            "line": 77,
            "description": "Loads a specific comparison plugin",
            "itemtype": "method",
            "name": "_loadComparison",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Comparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/comparison.js",
            "line": 98,
            "description": "Gets a specific comparison tool by name",
            "itemtype": "method",
            "name": "getComparison",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "BlinkDiffComparison"
            },
            "class": "Comparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/comparison.js",
            "line": 109,
            "description": "Compares a specific screenshot with all comparison plugins",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title of image",
                    "type": "String"
                },
                {
                    "name": "imageBlob",
                    "description": "Image buffer of current screenshot",
                    "type": "Buffer"
                },
                {
                    "name": "options",
                    "description": "Comparison options",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Comparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/comparison.js",
            "line": 133,
            "description": "Uses a list comparison plugins to compare a screenshot",
            "itemtype": "method",
            "name": "_compare",
            "params": [
                {
                    "name": "plugins",
                    "description": "",
                    "type": "String[]"
                },
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "imageBlob",
                    "description": "",
                    "type": "Buffer"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Comparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/comparison.js",
            "line": 159,
            "description": "Gets a list of comparison plugins",
            "itemtype": "method",
            "name": "_getCompareList",
            "return": {
                "description": "",
                "type": "String[]"
            },
            "access": "private",
            "tagname": "",
            "class": "Comparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/comparison.js",
            "line": 179,
            "description": "Tear-down of comparison plugins",
            "itemtype": "method",
            "name": "tearDown",
            "class": "Comparison",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/devicePixelRatio.js",
            "line": 31,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "DevicePixelRatio",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/devicePixelRatio.js",
            "line": 44,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "DevicePixelRatio",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/devicePixelRatio.js",
            "line": 64,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "DevicePixelRatio",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/devicePixelRatio.js",
            "line": 75,
            "description": "Gets the device-pixel-ratio of the browser.\nIf this info is not available yet, then it will determine it.\nIt will then be cached for each driver instance, determining this\nonly once per instance.\n\nNote:\n```horizontalPadding``` is any element that extents horizontally\noutside of the document, i.e. negative absolute position.",
            "itemtype": "method",
            "name": "getDevicePixelRatio",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "DevicePixelRatio",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/devicePixelRatio.js",
            "line": 103,
            "description": "Determines the device-pixel-ratio of the browser.",
            "itemtype": "method",
            "name": "_determineDevicePixelRatio",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "DevicePixelRatio",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/devicePixelRatio.js",
            "line": 148,
            "description": "Executes a script in the browser and returns the result.\n\nThis is a convenience method for accessing the execute method.",
            "itemtype": "method",
            "name": "_execute",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String|Function"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "DevicePixelRatio",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 32,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 45,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 65,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 76,
            "description": "Takes a screenshot as-is from the webdriver protocol",
            "itemtype": "method",
            "name": "takeRawScreenshot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 96,
            "description": "Takes a screenshot pre-processed and converted into an image",
            "itemtype": "method",
            "name": "takeProcessedScreenshot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 111,
            "description": "Gets the max. allowed resolution for one screenshot. If the document exceeds this resolution, then\nthe screenshot will be stitched together from multiple smaller screenshots called sections.",
            "itemtype": "method",
            "name": "getMaxImageResolution",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 123,
            "description": "Takes a screenshot of the whole document",
            "itemtype": "method",
            "name": "documentScreenshot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "description": "Context of screenshot",
                            "type": "ActiveWindow|Element",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 149,
            "description": "Takes a screenshot of the current view-port",
            "itemtype": "method",
            "name": "viewPortScreenshot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "description": "Context of screenshot",
                            "type": "ActiveWindow|Element",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 175,
            "description": "Takes a screenshot of a specific area",
            "itemtype": "method",
            "name": "areaScreenshot",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate for area",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate for area",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "Width of area to be captured",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.width-x"
                },
                {
                    "name": "height",
                    "description": "Height of area to be captured",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.height-y"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "description": "Context of screenshot",
                            "type": "ActiveWindow|Element",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 211,
            "description": "Determines the areas that should be blocked-out",
            "itemtype": "method",
            "name": "_determineBlockOuts",
            "params": [
                {
                    "name": "area",
                    "description": "Area that will be captured",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "Context of the capture (ActiveWindow, Element)",
                    "type": "Object"
                },
                {
                    "name": "blockOuts",
                    "description": "List of block-out areas",
                    "type": "Object[]|Element[]|string[]"
                },
                {
                    "name": "blockOutColor",
                    "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "black"
                }
            ],
            "return": {
                "description": "List of rectangular areas {x, y, width, height}",
                "type": "Object[]"
            },
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 291,
            "description": "Reduces a frame-item to a specified area",
            "itemtype": "method",
            "name": "_reduceRectItemToArea",
            "params": [
                {
                    "name": "item",
                    "description": "Item that should be reduced",
                    "type": "Object"
                },
                {
                    "name": "area",
                    "description": "Area to reduce it to",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 334,
            "description": "Calidates if a rectangular item has all the required properties",
            "itemtype": "method",
            "name": "_validateRectItem",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 353,
            "description": "Takes a screenshot of an area that will be specified through the return-value of the callback",
            "itemtype": "method",
            "name": "_takeScreenshot",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be called to get area to be captured. Supplies the data retrieved from the client as the first parameters.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "padding",
                            "description": "Padding for screenshots",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "viewPort",
                                    "description": "Padding for view-port screenshots, ignoring areas of the view-port screenshot",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "viewPort.top",
                                    "description": "Padding of view-port screenshot from the top",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "viewPort.bottom",
                                    "description": "Padding of view-port screenshot from the bottom",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "viewPort.left",
                                    "description": "Padding of view-port screenshot from the left",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "viewPort.right",
                                    "description": "Padding of view-port screenshot from the right",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "screenshot",
                                    "description": "Padding for screenshot, ignoring areas of the screenshot",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "screenshot.top",
                                    "description": "Padding of screenshot from the top",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "screenshot.bottom",
                                    "description": "Padding of screenshot from the bottom",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "screenshot.left",
                                    "description": "Padding of screenshot from the left",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "screenshot.right",
                                    "description": "Padding of screenshot from the right",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "document",
                                    "description": "Padding for document screenshots, ignoring areas of the document screenshot",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "document.top",
                                    "description": "Padding of document screenshot from the top",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "document.bottom",
                                    "description": "Padding of document screenshot from the bottom",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "document.left",
                                    "description": "Padding of document screenshot from the left",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "document.right",
                                    "description": "Padding of document screenshot from the right",
                                    "type": "Int",
                                    "optional": true,
                                    "optdefault": "0"
                                }
                            ]
                        },
                        {
                            "name": "context",
                            "description": "Context of screenshot",
                            "type": "ActiveWindow|Element",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 459,
            "description": "Applies all areas selected to be blocked-out",
            "params": [
                {
                    "name": "image",
                    "description": "Image to be blocked-out",
                    "type": "PNGImage"
                },
                {
                    "name": "blockOuts",
                    "description": "List of block-out areas",
                    "type": "Object[]"
                },
                {
                    "name": "devicePixelRatio",
                    "description": "Device pixel ratio for browser",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 479,
            "description": "Determines if the screenshots need additional padding\n\nNote:\n  Overwrite this method if you want to implement standard browser padding.",
            "itemtype": "method",
            "name": "_browserPadding",
            "params": [
                {
                    "name": "padding",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 540,
            "description": "Validates and corrects area that was given to capture",
            "itemtype": "method",
            "name": "_validateArea",
            "params": [
                {
                    "name": "area",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "padding",
                    "description": "Padding for screenshots",
                    "type": "Object",
                    "props": [
                        {
                            "name": "viewPort",
                            "description": "Padding for view-port screenshots, ignoring areas of the view-port screenshot",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "top",
                                    "description": "Padding of view-port screenshot from the top",
                                    "type": "Int"
                                },
                                {
                                    "name": "bottom",
                                    "description": "Padding of view-port screenshot from the bottom",
                                    "type": "Int"
                                },
                                {
                                    "name": "left",
                                    "description": "Padding of view-port screenshot from the left",
                                    "type": "Int"
                                },
                                {
                                    "name": "right",
                                    "description": "Padding of view-port screenshot from the right",
                                    "type": "Int"
                                }
                            ]
                        },
                        {
                            "name": "screenshot",
                            "description": "Padding for screenshots, ignoring areas of the screenshot",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "top",
                                    "description": "Padding of screenshot from the top",
                                    "type": "Int"
                                },
                                {
                                    "name": "bottom",
                                    "description": "Padding of screenshot from the bottom",
                                    "type": "Int"
                                },
                                {
                                    "name": "left",
                                    "description": "Padding of screenshot from the left",
                                    "type": "Int"
                                },
                                {
                                    "name": "right",
                                    "description": "Padding of screenshot from the right",
                                    "type": "Int"
                                }
                            ]
                        },
                        {
                            "name": "document",
                            "description": "Padding for document screenshots, ignoring areas of the document screenshot",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "top",
                                    "description": "Padding of document screenshot from the top",
                                    "type": "Int"
                                },
                                {
                                    "name": "bottom",
                                    "description": "Padding of document screenshot from the bottom",
                                    "type": "Int"
                                },
                                {
                                    "name": "left",
                                    "description": "Padding of document screenshot from the left",
                                    "type": "Int"
                                },
                                {
                                    "name": "right",
                                    "description": "Padding of document screenshot from the right",
                                    "type": "Int"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "initData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 595,
            "description": "Calculates the sections that need to be captured on their own to be able to capture the whole document.\n\nThis method depends on the value given to \"maxImageResolution\".",
            "itemtype": "method",
            "name": "_gatherSections",
            "params": [
                {
                    "name": "area",
                    "description": "Area to capture",
                    "type": "Object"
                },
                {
                    "name": "padding",
                    "description": "Padding for screenshots",
                    "type": "Object",
                    "props": [
                        {
                            "name": "viewPort",
                            "description": "Padding for view-port screenshots, ignoring areas of the view-port screenshot",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "top",
                                    "description": "Padding of view-port screenshot from the top",
                                    "type": "Int"
                                },
                                {
                                    "name": "bottom",
                                    "description": "Padding of view-port screenshot from the bottom",
                                    "type": "Int"
                                },
                                {
                                    "name": "left",
                                    "description": "Padding of view-port screenshot from the left",
                                    "type": "Int"
                                },
                                {
                                    "name": "right",
                                    "description": "Padding of view-port screenshot from the right",
                                    "type": "Int"
                                }
                            ]
                        },
                        {
                            "name": "screenshot",
                            "description": "Padding for screenshots, ignoring areas of the screenshot",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "top",
                                    "description": "Padding of screenshot from the top",
                                    "type": "Int"
                                },
                                {
                                    "name": "bottom",
                                    "description": "Padding of screenshot from the bottom",
                                    "type": "Int"
                                },
                                {
                                    "name": "left",
                                    "description": "Padding of screenshot from the left",
                                    "type": "Int"
                                },
                                {
                                    "name": "right",
                                    "description": "Padding of screenshot from the right",
                                    "type": "Int"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "initData",
                    "description": "Data that was initially gathered from the client",
                    "type": "Object"
                },
                {
                    "name": "maxImageResolution",
                    "description": "Max. number of pixels allowed for a screenshot",
                    "type": "Int"
                },
                {
                    "name": "needsStitching",
                    "description": "Does the browser need stitching?",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "List of sections",
                "type": "Object[]"
            },
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 683,
            "description": "Calculates the sections that need to be captured when the browser is not able to return pixels outside of the view-port.",
            "itemtype": "method",
            "name": "_gatherViewPortSections",
            "params": [
                {
                    "name": "section",
                    "description": "Section that should be captured",
                    "type": "Object"
                },
                {
                    "name": "padding",
                    "description": "Padding for screenshots",
                    "type": "Object",
                    "props": [
                        {
                            "name": "viewPort",
                            "description": "Padding for view-port screenshots, ignoring areas of the view-port screenshot",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "top",
                                    "description": "Padding of view-port screenshot from the top",
                                    "type": "Int"
                                },
                                {
                                    "name": "bottom",
                                    "description": "Padding of view-port screenshot from the bottom",
                                    "type": "Int"
                                },
                                {
                                    "name": "left",
                                    "description": "Padding of view-port screenshot from the left",
                                    "type": "Int"
                                },
                                {
                                    "name": "right",
                                    "description": "Padding of view-port screenshot from the right",
                                    "type": "Int"
                                }
                            ]
                        },
                        {
                            "name": "screenshot",
                            "description": "Padding for screenshots, ignoring areas of the screenshot",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "top",
                                    "description": "Padding of screenshot from the top",
                                    "type": "Int"
                                },
                                {
                                    "name": "bottom",
                                    "description": "Padding of screenshot from the bottom",
                                    "type": "Int"
                                },
                                {
                                    "name": "left",
                                    "description": "Padding of screenshot from the left",
                                    "type": "Int"
                                },
                                {
                                    "name": "right",
                                    "description": "Padding of screenshot from the right",
                                    "type": "Int"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "initData",
                    "description": "Data that was initially gathered from the client",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "Index of first view-port",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Object[]"
            },
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 745,
            "description": "Takes all the screenshots defined in section",
            "itemtype": "method",
            "name": "_takeSectionScreenshots",
            "params": [
                {
                    "name": "sections",
                    "description": "List of sections to capture",
                    "type": "Object[]"
                },
                {
                    "name": "initData",
                    "description": "Data that was initially gathered from the client",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 767,
            "description": "Takes all the screenshots defined in the view-ports",
            "itemtype": "method",
            "name": "_takeViewPortScreenshots",
            "params": [
                {
                    "name": "section",
                    "description": "Section to capture",
                    "type": "Object"
                },
                {
                    "name": "viewPorts",
                    "description": "List of view-ports to capture",
                    "type": "Object[]"
                },
                {
                    "name": "initData",
                    "description": "Data that was initially gathered from the client",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 787,
            "description": "Takes a screenshot of the given view-port in relation to the section",
            "itemtype": "method",
            "name": "_takeViewPortScreenshot",
            "params": [
                {
                    "name": "section",
                    "description": "Section to capture",
                    "type": "Object"
                },
                {
                    "name": "viewPort",
                    "description": "View-ports to capture",
                    "type": "Object"
                },
                {
                    "name": "initData",
                    "description": "Data that was initially gathered from the client",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 826,
            "description": "Processes the screenshots before it is used for stitching\n\nNote:\n Some browser need some pre-processing like rotating the screenshot.",
            "itemtype": "method",
            "name": "_screenshotPrePrecessing",
            "params": [
                {
                    "name": "image",
                    "description": "Image to process",
                    "type": "PNGImage"
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 858,
            "description": "Stitches all the sections and view-ports together to one final image",
            "itemtype": "method",
            "name": "_stitchImages",
            "params": [
                {
                    "name": "area",
                    "description": "Area that should have been captured on the page",
                    "type": "Object"
                },
                {
                    "name": "sections",
                    "description": "List of sections that were captured",
                    "type": "Object[]"
                },
                {
                    "name": "devicePixelRatio",
                    "description": "Device pixel ratio for browser",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "PNGImage"
            },
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/screenshot.js",
            "line": 909,
            "description": "Executes a script in the browser and returns the result.\n\nThis is a convenience method for accessing the execute method.",
            "itemtype": "method",
            "name": "_execute",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String|Function"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Screenshot",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/stitching.js",
            "line": 31,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Stitching",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/stitching.js",
            "line": 44,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Stitching",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/stitching.js",
            "line": 64,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Stitching",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/stitching.js",
            "line": 75,
            "description": "Is stitching needed for browser?\n\nSome browsers (i.e. Chrome) do only take a screenshot of the view-port instead of the whole document as per standard.\nThis information will then be cached for each driver instance, determining this only once per instance.",
            "itemtype": "method",
            "name": "doesNeedStitching",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Stitching",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/stitching.js",
            "line": 99,
            "description": "Determines if the browser needs stitching due to the fact of taking only view-port screenshots instead of\nwhole document ones.\n\nNote:\n```horizontalPadding``` is any element that extents horizontally\noutside of the document, i.e. negative absolute position.",
            "itemtype": "method",
            "name": "_determineNeedsStitching",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Stitching",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/stitching.js",
            "line": 144,
            "description": "Processes the exception handling of stitching determination\n\nNote:\n  Overwrite this method if you want to change the stitching behavior of browsers.",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "PNGImage"
                },
                {
                    "name": "initData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "devicePixelRatio",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Stitching",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/helpers/stitching.js",
            "line": 183,
            "description": "Executes a script in the browser and returns the result.\n\nThis is a convenience method for accessing the execute method.",
            "itemtype": "method",
            "name": "_execute",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String|Function"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "Stitching",
            "module": "WebDriver",
            "submodule": "Helpers"
        },
        {
            "file": "lib/scripts/devicePixelRatio.js",
            "line": 7,
            "description": "Initialize the device-pixel-ratio determination,\ncollecting information that need to be reverted later on and\nmodifying the document for device-pixel-ratio data.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "horizontalPadding",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver"
        },
        {
            "file": "lib/scripts/devicePixelRatio.js",
            "line": 60,
            "description": "Reverts all changes done to the document in the init",
            "itemtype": "method",
            "name": "revert",
            "params": [
                {
                    "name": "initData",
                    "description": "Data gathered during init-phase",
                    "type": "Object"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver"
        },
        {
            "file": "lib/scripts/screenshot.js",
            "line": 3,
            "description": "Initializes screenshots and gathers data to revert changes.\nThis function will also gather information required for\nscreenshots like dimensions of document and view-port.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "needsStitching",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver"
        },
        {
            "file": "lib/scripts/screenshot.js",
            "line": 72,
            "description": "Reverts changes done to the document during the screenshot process",
            "itemtype": "method",
            "name": "revert",
            "params": [
                {
                    "name": "initData",
                    "description": "Data gathered during init-phase",
                    "type": "Object"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver"
        },
        {
            "file": "lib/scripts/screenshot.js",
            "line": 91,
            "description": "Moves document to a specified offset (instead of really scrolling)",
            "params": [
                {
                    "name": "x",
                    "description": "X offset of document, translating the document without scrolling",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Y offset of document, translating the document without scrolling",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "Height of the document",
                    "type": "Int|null"
                },
                {
                    "name": "initData",
                    "description": "Data gathered during init-phase",
                    "type": "Object"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver"
        },
        {
            "file": "lib/scripts/stitching.js",
            "line": 3,
            "description": "Initializes the stitching determination.\nIt gathers the current document state,\nand it will modify the document as needed.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "horizontalPadding",
                    "description": "",
                    "type": "Int"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver"
        },
        {
            "file": "lib/scripts/stitching.js",
            "line": 45,
            "description": "Revert changes done to the document during the init-phase",
            "itemtype": "method",
            "name": "revert",
            "params": [
                {
                    "name": "initData",
                    "description": "Data gathered during init-phase",
                    "type": "Object"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 47,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 64,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 75,
            "description": "Execute a script on the browser and return the result.\n\nSource should be either a function body as a string or a function.\nKeep in mind that if it is a function it will not have access to\nany variables from the node.js process.",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String|Function"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 93,
            "description": "Execute a script asynchronously on the browser.\n\nSource should be either a function body as a string or a function.\nKeep in mind that if it is a function it will not have access to\nany variables from the node.js process.",
            "itemtype": "method",
            "name": "asyncExecute",
            "params": [
                {
                    "name": "script",
                    "description": "",
                    "type": "String|Function"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 111,
            "description": "Type a string of characters into the browser\n\nNote: Modifier keys is kept between calls, so mouse interactions can be performed\nwhile modifier keys are depressed.",
            "itemtype": "method",
            "name": "sendKeys",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String|Array.<String>"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 125,
            "description": "Take a screenshot of the current page",
            "itemtype": "method",
            "name": "takeScreenshot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Binary image buffer",
                "type": "Buffer"
            },
            "deprecated": true,
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 137,
            "description": "Captures the complete document",
            "itemtype": "method",
            "name": "captureDocument",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Binary image buffer",
                "type": "Buffer"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 157,
            "description": "Captures the complete document",
            "itemtype": "method",
            "name": "documentScreenshot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Binary image buffer",
                "type": "Buffer"
            },
            "deprecated": true,
            "deprecationMessage": "Use captureDocument.",
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 173,
            "description": "Captures the currently visible view-port",
            "itemtype": "method",
            "name": "captureViewPort",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Binary image buffer",
                "type": "Buffer"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 193,
            "description": "Captures the currently visible view-port",
            "itemtype": "method",
            "name": "viewPortScreenshot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Binary image buffer",
                "type": "Buffer"
            },
            "deprecated": true,
            "deprecationMessage": "Use captureViewPort.",
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 209,
            "description": "Captures a specific area of the document",
            "itemtype": "method",
            "name": "captureArea",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate for area",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate for area",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "Width of area to be captured",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.width-x"
                },
                {
                    "name": "height",
                    "description": "Height of area to be captured",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.height-y"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Binary image buffer",
                "type": "Buffer"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 233,
            "description": "Captures a specific area of the document",
            "itemtype": "method",
            "name": "areaScreenshot",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate for area",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate for area",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "Width of area to be captured",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.width-x"
                },
                {
                    "name": "height",
                    "description": "Height of area to be captured",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.height-y"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Binary image buffer",
                "type": "Buffer"
            },
            "deprecated": true,
            "deprecationMessage": "Use captureArea.",
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 253,
            "description": "Take a screenshot of the current page and save to a file",
            "itemtype": "method",
            "name": "saveScreenshot",
            "params": [
                {
                    "name": "path",
                    "description": "Path where the file should be saved to",
                    "type": "String"
                },
                {
                    "name": "options.horizontalPadding",
                    "description": "Padding of the document for adjustment",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "options.eachFn",
                    "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "options.completeFn",
                    "description": "Will execute method on client after all screenshots are taken.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "options.blockOuts",
                    "description": "List of areas/elements that should be blocked-out",
                    "type": "Object[]|Element[]|string[]",
                    "optional": true
                },
                {
                    "name": "options.blockOutColor",
                    "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "black"
                },
                {
                    "name": "options.wait",
                    "description": "Wait in ms before each screenshot",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "100"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 285,
            "description": "Compares the document with a previous screenshot, showing differences between them",
            "itemtype": "method",
            "name": "compareDocument",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title for comparison",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "compare",
                            "description": "Options for the comparison. See Blink-Diff documentation.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Additional identifier to differentiate comparisons even more.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "1"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "Are the screenshots the same? (NULL if there is nothing to compare to)",
                "type": "Boolean|null"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 309,
            "description": "Compares the view-port with a previous screenshot, showing differences between them",
            "itemtype": "method",
            "name": "compareViewPort",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title for comparison",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "compare",
                            "description": "Options for the comparison. See Blink-Diff documentation.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Additional identifier to differentiate comparisons even more.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "1"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "Are the screenshots the same? (NULL if there is nothing to compare to)",
                "type": "Boolean|null"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 333,
            "description": "Compares an area of the document with a previous screenshot, showing differences between them",
            "itemtype": "method",
            "name": "compareArea",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title for comparison",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "X-coordinate for area",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate for area",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "Width of area to be captured",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.width-x"
                },
                {
                    "name": "height",
                    "description": "Height of area to be captured",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.height-y"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "compare",
                            "description": "Options for the comparison. See Blink-Diff documentation.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Additional identifier to differentiate comparisons even more.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "1"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "Are the screenshots the same? (NULL if there is nothing to compare to)",
                "type": "Boolean|null"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 362,
            "description": "Get the element on the page that currently has focus",
            "itemtype": "method",
            "name": "getActiveElement",
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 374,
            "description": "Get an element via a selector.\nWill throw an error if the element does not exist.",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "[selectorType='css",
                    "description": "selector']",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 395,
            "description": "Get elements via a selector.",
            "itemtype": "method",
            "name": "getElements",
            "params": [
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "[selectorType='css",
                    "description": "selector']",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array.<Element>"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 417,
            "description": "Does a specific element exist?",
            "itemtype": "method",
            "name": "hasElement",
            "params": [
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "[selectorType='css",
                    "description": "selector']",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 432,
            "description": "Close the current window",
            "itemtype": "method",
            "name": "close",
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 442,
            "description": "Get the current page title",
            "itemtype": "method",
            "name": "getTitle",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 452,
            "description": "Get the current page source",
            "itemtype": "method",
            "name": "getSource",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 463,
            "description": "Get the global-touch object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "touch",
            "return": {
                "description": "",
                "type": "GlobalTouch"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 474,
            "description": "Get the global-mouse object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "mouse",
            "return": {
                "description": "",
                "type": "GlobalMouse"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 485,
            "description": "Get the Navigator object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "navigator",
            "return": {
                "description": "",
                "type": "Navigator"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 496,
            "description": "Get the Frame object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "frame",
            "return": {
                "description": "",
                "type": "Frame"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 507,
            "description": "Get the Alert object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "alert",
            "return": {
                "description": "",
                "type": "Alert"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 519,
            "description": "Gets the scroll coordinates",
            "itemtype": "method",
            "name": "getScrollPosition",
            "return": {
                "description": "Position as { x:<Number>, y:<Number> }",
                "type": "Object"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 534,
            "description": "Scrolls to a specific coordinate",
            "itemtype": "method",
            "name": "scrollTo",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 547,
            "description": "Scrolls by a specific coordinate, relative to the current position",
            "itemtype": "method",
            "name": "scrollBy",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/activeWindow.js",
            "line": 568,
            "description": "Convert code to string before execution",
            "params": [
                {
                    "name": "code",
                    "description": "",
                    "type": "String|Function"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ActiveWindow",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/alert.js",
            "line": 28,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Alert",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/alert.js",
            "line": 41,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Alert",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/alert.js",
            "line": 61,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Alert",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/alert.js",
            "line": 72,
            "description": "Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Alert",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/alert.js",
            "line": 82,
            "description": "Sends keystrokes to a JavaScript prompt() dialog",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Alert",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/alert.js",
            "line": 94,
            "description": "Accepts the currently displayed alert dialog. Usually, this is equivalent to\nclicking on the 'OK' button in the dialog.",
            "itemtype": "method",
            "name": "accept",
            "class": "Alert",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/alert.js",
            "line": 104,
            "description": "Dismisses the currently displayed alert dialog. For confirm() and prompt() dialogs,\nthis is equivalent to clicking the 'Cancel' button. For alert() dialogs, this is\nequivalent to clicking the 'OK' button.\n\nNote: Never use this with an alert. Use accept() instead.",
            "itemtype": "method",
            "name": "dismiss",
            "class": "Alert",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/browser.js",
            "line": 33,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "protected",
            "tagname": "",
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 45,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 65,
            "description": "Landscape orientation of the device",
            "static": 1,
            "itemtype": "property",
            "name": "ORIENTATION_LANDSCAPE",
            "type": "{string}",
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 74,
            "description": "Portrait orientation of the device",
            "static": 1,
            "itemtype": "property",
            "name": "ORIENTATION_PORTRAIT",
            "type": "{string}",
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 88,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 99,
            "description": "Change focus to another window",
            "itemtype": "method",
            "name": "activateWindow",
            "params": [
                {
                    "name": "handle",
                    "description": "",
                    "type": "WindowHandler|String"
                }
            ],
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 123,
            "description": "Get the currently active window.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "activeWindow",
            "return": {
                "description": "",
                "type": "ActiveWindow"
            },
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 134,
            "description": "Get an array of windows for all available windows",
            "itemtype": "method",
            "name": "getWindows",
            "return": {
                "description": "",
                "type": "Array.<WindowHandler>"
            },
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 149,
            "description": "Get the current browser orientation",
            "itemtype": "method",
            "name": "getOrientation",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 159,
            "description": "Get the current browser orientation",
            "itemtype": "method",
            "name": "setOrientation",
            "params": [
                {
                    "name": "orientation",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 171,
            "description": "Get the current geo location",
            "itemtype": "method",
            "name": "getGeoLocation",
            "return": {
                "description": "`{latitude: number, longitude: number, altitude: number}`",
                "type": "Object"
            },
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 181,
            "description": "Set the current geo location",
            "itemtype": "method",
            "name": "setGeoLocation",
            "params": [
                {
                    "name": "latitude",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "longitude",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "altitude",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 197,
            "description": "Get the IME object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "ime",
            "return": {
                "description": "",
                "type": "IME"
            },
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 209,
            "description": "Get the Cookie-Storage object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "cookieStorage",
            "return": {
                "description": "",
                "type": "CookieStorage"
            },
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/browser.js",
            "line": 220,
            "description": "Get the Local-Storage object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "localStorage",
            "return": {
                "description": "",
                "type": "LocalStorage"
            },
            "class": "Browser",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/chain.js",
            "line": 67,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 80,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 100,
            "description": "Gets the driver object.",
            "itemtype": "method",
            "name": "driver",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "since": "0.2.1",
            "example": [
                "\n```\ndriver === driver.chain().driver() // true\n```"
            ],
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 115,
            "description": "Gets the driver object.\n\nThis is an alias for driver().",
            "itemtype": "method",
            "name": "getDriver",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "since": "0.2.0",
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 127,
            "description": "Convenience function to execute element actions",
            "itemtype": "method",
            "name": "_elementAction",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of element that action applies to",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Function to execute for every found element",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The chain object",
                "type": "Chain"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 150,
            "description": "Convenience function to execute driver actions",
            "itemtype": "method",
            "name": "_driverAction",
            "params": [
                {
                    "name": "value",
                    "description": "Value that needs to be evaluated",
                    "type": "*"
                },
                {
                    "name": "fn",
                    "description": "Function that needs to be triggered with evaluated value",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The chain object",
                "type": "Chain"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 168,
            "description": "Convenience function to handle scope for chains",
            "itemtype": "method",
            "name": "_scopeCallBack",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function that should be triggered with the correct scope",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "List of arguments to supply to the callback function",
                    "type": "*[]"
                }
            ],
            "return": {
                "description": "The chain object",
                "type": "Chain"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 187,
            "description": "Adjusts the configurations according to the browsers behavior.\n\nNote:\nThis is needed especially when screenshots should be taken since\nbrowsers behave here very different from each other.\n\nNeeds to be called only once per taxi instance.",
            "itemtype": "method",
            "name": "adjust",
            "params": [
                {
                    "name": "options",
                    "description": "Preparation options for chaining",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url",
                            "description": "Default website for adjustment for browser",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "'http://www.example.org'"
                        },
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with each selected element in turn",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.6",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function ()\n\n###Scope\n> {`Chain`}\n\n###Parameters\nnone",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 227,
            "description": "Selects DOM elements, triggering each selected element on the supplied callback function",
            "itemtype": "method",
            "name": "elements",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with each selected element in turn",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object",
                "type": "Chain"
            },
            "example": [
                "\n```\n// Determines all element with the \"title\" class and prints the\n// text content of these elements to the console, one-by-one\n\ndriver.elements('.title', function (element) {\n  console.log(element.getText());\n});\n```\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element"
            ],
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 268,
            "description": "Retrieves the attribute value of the selected elements",
            "itemtype": "method",
            "name": "elementAttribute",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "Name of the attribute to get the value of",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the attribute value",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object",
                "type": "Chain"
            },
            "example": [
                "\n```\n// Determines the value of all input tags and prints them out to the console.\n\ndriver.elementAttribute('input', 'value', function (value) {\n  console.log(value);\n});\n```\n\n---------------------------------------\n\n##Callback function\n> function (`value`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`value`** {`string`} - Value of attribute\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element"
            ],
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 312,
            "description": "Checks if the selected elements have a specific class",
            "itemtype": "method",
            "name": "elementHasClass",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "className",
                    "description": "Name of class to look for",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the result of the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object",
                "type": "Chain"
            },
            "example": [
                "\n```\n// Selects all input tags, checking if they have the \"name\" class,\n// and printing out the value of the input element when they have the class.\n\ndriver.elementHasClass('input', 'name', function (hasClass, element) {\n  if (hasClass) {\n    console.log(element.getValue());\n  }\n});\n```\n\n---------------------------------------\n\n##Callback function\n> function (`hasClass`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`hasClass`** {`boolean`} - Does the selected element have the supplied class-name?\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element"
            ],
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 359,
            "description": "Determines a list of classes assigned to the selected elements",
            "itemtype": "method",
            "name": "elementClasses",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the list of classes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object",
                "type": "Chain"
            },
            "example": [
                "\n```\n// Prints a comma-separated list of classes that the element with the id \"search\" has.\n\ndriver.elementClasses('#search', function (classes) {\n  console.log(classes.join(', '));\n});\n```\n\n---------------------------------------\n\n##Callback function\n> function (`classes`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`classes`** {`string[]`} - List of classes of the selected element\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element"
            ],
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 402,
            "description": "Gets the text content of the selected elements",
            "itemtype": "method",
            "name": "elementText",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be called with the text content of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object",
                "type": "Chain"
            },
            "example": [
                "\n```\n// Retrieves the contents of an article synopsis\n\ndriver.elementText('.synopsis', function (text) {\n  console.log(text);\n});\n```\n\n---------------------------------------\n\n##Callback function\n> function (`text`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`text`** {`string`} - Text content of selected element\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element"
            ],
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 445,
            "description": "Determines if selected elements have a string or even a sub-string in their text content",
            "itemtype": "method",
            "name": "elementHasText",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "String, sub-string, or regular expression to look for in the elements",
                    "type": "String|RegEx"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be called with the result of the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object",
                "type": "Chain"
            },
            "example": [
                "\n```\n// Checks if the article synopsis has the word \"Lion\" in it.\n\ndriver.elementHasText('.synopsis', 'Lion', function (hasText) {\n  if (hasText) {\n    console.log('Found \"Lion\" in the synopsis!');\n  }\n});\n```\n\n---------------------------------------\n\n##Callback function\n> function (`hasText`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`hasText`** {`boolean`} - Does selected element have the supplied text as string or substring?\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element\n\n**Note**\nThe text search is case sensitive. If you want case insensitivity, then please use regular expressions.\n(i.e. /<string>/i)"
            ],
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 495,
            "description": "Determines the contents of the `value` attribute on each selected element\n\n**Note**\nThis will only work on elements that have a `value` attribute.",
            "itemtype": "method",
            "name": "elementValue",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be called with the value of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`value`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`value`** {`string`} - Value of the \"value\" attribute of the selected element\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 533,
            "description": "Gets the name of the tag for each selected element",
            "itemtype": "method",
            "name": "elementTagName",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the name of the tag of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`tagName`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`tagName`** {`string`} - Tag-name of the selected element\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 568,
            "description": "Determines the value of a CSS property for each selected element\n\n**Note**\nUse the original CSS property name according to the CSS standard, **not** the JavaScript naming convention for CSS properties.",
            "itemtype": "method",
            "name": "elementCssValue",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "Name of the CSS property to determine the value of",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will trigger with the value of the CSS property of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`value`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`value`** {`string`} - Value of the requested CSS-property of the selected element\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 607,
            "description": "Checks if the selected elements are displayed somewhere on the page",
            "itemtype": "method",
            "name": "elementIsDisplayed",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the result of the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`isDisplayed`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`isDisplayed`** {`boolean`} - Is the selected element displayed?\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 642,
            "description": "Checks if the selected elements are checked\n\n**Note**\nThis function will only work on elements which have a \"checked\"-value (i.e. checkbox, radiobox, or options element).",
            "itemtype": "method",
            "name": "elementIsSelected",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the result of the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`isSelected`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`isSelected`** {`boolean`} - Is the selected element checked/selected?\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 680,
            "description": "Checks if the selected elements are enabled",
            "itemtype": "method",
            "name": "elementIsEnabled",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the result of the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`isEnabled`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`isEnabled`** {`boolean`} - Is the selected element enabled?\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 715,
            "description": "Types complete strings or key-strokes into the selected element",
            "itemtype": "method",
            "name": "elementSendKeys",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "keys",
                    "description": "or key-strokes to send",
                    "type": "String|string[]"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 750,
            "description": "Clears the contents of the selected elements\n\n**Note**\nThis will only work on elements that can be cleared like input boxes and text areas.",
            "itemtype": "method",
            "name": "elementClear",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 787,
            "description": "Submits the selected form elements\n\n\n**Note**\nThis should be usually only one form element. It doesn't make sense to apply this to any other element type.",
            "itemtype": "method",
            "name": "elementSubmit",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 825,
            "description": "Determines the size of the selected elements",
            "itemtype": "method",
            "name": "elementSize",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the size of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`size`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`size`** {`object`} - Size of the selected element\n    * **`width`** {`int`} - Width of the selected element\n    * **`height`** {`int`} - Height of the selected element\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 862,
            "description": "Determines the absolute location of the selected elements",
            "itemtype": "method",
            "name": "elementLocation",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the location of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`location`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`location`** {`object`} - Absolute location of the selected element\n    * **`x`** {`int`} - Absolute x-coordinate of the selected element\n    * **`y`** {`int`} - Absolute y-coordinate of the selected element\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 899,
            "description": "Determines the location of the selected elements relative to the current view-ports top-left corner",
            "itemtype": "method",
            "name": "elementLocationInView",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the location of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`location`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`location`** {`object`} - Location of the selected element relative to the view-port\n    * **`x`** {`int`} - X-coordinate of the selected element relative to the view-port\n    * **`y`** {`int`} - Y-coordinate of the selected element relative to the view-port\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 936,
            "description": "Determines the absolute location and size of the selected elements",
            "itemtype": "method",
            "name": "elementFrame",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the size and location of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`frame`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`frame`** {`object`} - Absolute coordinates and size of the selected element\n    * **`x`** {`int`} - Absolute x-coordinate of the selected element\n    * **`y`** {`int`} - Absolute y-coordinate of the selected element\n    * **`width`** {`int`} - Width of the selected element\n    * **`height`** {`int`} - Height of the selected element\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 975,
            "description": "Determines the absolute coordinates of the center of the selected elements",
            "itemtype": "method",
            "name": "elementAbsoluteCenter",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the absolute center coordinates of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`coordinates`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`coordinates`** {`object`} - Absolute coordinates of the center of the selected element\n    * **`x`** {`int`} - Absolute x-coordinate of the selected elements center\n    * **`y`** {`int`} - Absolute y-coordinate of the selected elements center\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1012,
            "description": "Determines the coordinates of the center of the selected elements relative to the elements top-left corner",
            "itemtype": "method",
            "name": "elementRelativeCenter",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the relative center coordinates of the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`coordinates`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`coordinates`** {`object`} - Coordinates of the center of the selected element relative to the upper-left corner of the element itself\n    * **`x`** {`int`} - X-coordinate of the selected elements center relative to the upper-left corner of the element itself\n    * **`y`** {`int`} - Y-coordinate of the selected elements center relative to the upper-left corner of the element itself\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1049,
            "description": "Captures an element in a PNG buffer, discarding or ignoring the rest of the document from the image",
            "itemtype": "method",
            "name": "elementCapture",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for taking the screenshot",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute the function on client before each screenshot is taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute the function on client after all screenshots are taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "allPadding",
                            "description": "Padding for all sides",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "hPadding",
                            "description": "Padding on left and right side of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "vPadding",
                            "description": "Padding on the top and on the bottom of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "leftPadding",
                            "description": "Padding on the left of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "rightPadding",
                            "description": "Padding on the right of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "topPadding",
                            "description": "Padding on the top of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "bottomPadding",
                            "description": "Padding on the bottom of the element",
                            "type": "Int",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the image-buffer of the screenshot from the selected element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`imageBuffer`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`imageBuffer`** {`Buffer`} - Binary buffer of the PNG image\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element\n\n---------------------------------------\n\n##options.eachFn (`index`)\nThis function is executed on the client-side just before a new screenshot is taken.\nHow often this function is executed depends on the browser and should only be used\nto prepare for screenshots (i.e. removing a floating header on the second image).\n\n###Scope\n> {`document.window`} - within the browser\n\n###Parameters\n* **`index`** {`int`} - Zero-based index of screenshot that will be taken\n\n**Note**\nSince this function is executed on the client, it will not be able to capture\nvariables in the lexical scope. The function will be serialized, sent to the client,\nde-serialized, and executed without knowing the context of its initial definition.\n\n---------------------------------------\n\n##options.completeFn ()\nThis function is executed on the client-side just after all screenshots were taken.\nThis function will only be called once and it can be used to revert changes applied\nto the document during eachFn calls (i.e. re-attaching a floating header).\n\n###Scope\n> {`document.window`} - within the browser\n\n###Parameters\n> none\n\n**Note**\nSince this function is executed on the client, it will not be able to capture\nvariables in the lexical scope. The function will be serialized, sent to the client,\nde-serialized, and executed without knowing the context of its initial definition.\n\n---------------------------------------\n\n##options.blockOuts\nSometimes, you want to block-out areas on a screenshot, be it for censoring purposes or\nfor comparison during multiple test-runs with every changing data (i.e. date/time label).\nIn this list, you can supply CSS selectors, a list of already selected elements, or even\na list of pre-defined fixed areas. All of these different \"selectors\" can be combined\nin the same list.\n\n###CSS Selector\nThe supplied CSS selector will be used to find single or multiple DOM element in the\ndocument. Taxi will flatten the list whenever multiple items are found.\n\n###Element Selector\nThese are objects that were already selected previously and re-used for this purpose.\n\n###Static object\nThis object holds static information about the location and the size of the area to\nblock-out.\n\nThe object has following properties:\n* **`x`** {`int`} - X-coordinate of the area\n* **`y`** {`int`} - Y-coordinate of the area\n* **`width`** {`int`} - Width of the area\n* **`height`** {`int`} - Height of the area\n* **`[color]`** {`object`} - Custom block-out color for this area only. See options.blockOutColor for more information.\n\n---------------------------------------\n\n##options.blockOutColor\nThis is the default color for all block-out areas that do not have custom colors.\n\n###Properties\n* **`[red]`** {`int`} -   Red component of the color for blocking-out the area. Accepted values\nare from 0-255. 0 means that there is no intensity of this component within the resulting color;\n255 is the full intensity.\n* **`[green]`** {`int`} - Green component of the color for blocking-out the area. Accepted values\nare from 0-255. 0 means that there is no intensity of this component within the resulting color;\n255 is the full intensity.\n* **`[blue]`** {`int`} -  Blue component of the color for blocking-out the area. Accepted values\nare from 0-255. 0 means that there is no intensity of this component within the resulting color;\n255 is the full intensity.\n* **`[alpha]`** {`int`} - Alpha channel of the color for blocking-out the area. Accepted values\nare from 0.0-1.0. 0 means that there is no intensity of this component within the resulting color;\n1.0 is the full intensity.\n\n---------------------------------------\n\n##options.wait\nSometimes, it is required to slow-down the screen-capturing process. By default,\nTaxi will wait 100 milliseconds before each screenshot to make sure that changes\ncaused by the scrolling behavior were applied in the browser view-port.\nExtend this time if the screenshot needs special behavior.\n\n\n##options.*padding\nPadding that reaches outside of the document itself will be reduced to the extend of the document.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1192,
            "description": "Compares the image of selected elements from previous captures/comparisons",
            "itemtype": "method",
            "name": "elementCompare",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "title",
                    "description": "Title of the comparison",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the screenshots and compare the data. See elementCapture for more information on the screenshot options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute the function on client before each screenshot is taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute the function on client after all screenshots are taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "compare",
                            "description": "Options for the comparison. See the [Blink-Diff documentation](https://github.com/yahoo/blink-diff#object-usage)",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Additional identifier to differentiate comparison",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "1"
                                }
                            ]
                        },
                        {
                            "name": "allPadding",
                            "description": "Padding for all sides",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "hPadding",
                            "description": "Padding on left and right side of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "vPadding",
                            "description": "Padding on the top and on the bottom of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "leftPadding",
                            "description": "Padding on the left of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "rightPadding",
                            "description": "Padding on the right of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "topPadding",
                            "description": "Padding on the top of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "bottomPadding",
                            "description": "Padding on the bottom of the element",
                            "type": "Int",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the result of the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> `function` (`isSimilar`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`isSimilar`** {`boolean`|`null`} - Is comparison similar to previous one?\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element\n\n**Notes**\n* **`isSimilar`** will be NULL when the value cannot be determined at the time of comparison\ndue to the comparison process, or simply because there was no previous image to compare to.\n* **`isSimilar`** will be true when all of the comparison APIs determined a similarity to previously\ncaptured data, depending on the configuration setting for each of those comparison APIs.\n* **`isSimilar`** will be false when at least one comparison API determines a difference in the\ncurrent and previous state.\n\n---------------------------------------\n\n##Notes\n* **`title`** The title needs to be unique to identify each of these comparisons across all test-runs.\nAdditionally, the id parameter can be used to make this identifier unique.\n* **`options.compare.id`** The id will be added to the title to get a unique identifier.\n\n##Comparison configuration\nGeneral comparison options can be set globally in the driver through the `setValue`/`getValue` methods.\nThe options for the comparison, however, need to be supplied for every comparison itself.\n\n###Changing configuration options\n```\ndriver.setValue('blinkDiff.outputOnSuccess', true);\n```\n\n###Options\n* **`blinkDiff.outputOnSuccess`** {`boolean`} [default=true] - Should an output be created when comparison is successful?\nThere will always be an output if the comparison fails.\n* **`blinkDiff.failOnDifference`** {`boolean`} [default=true] - Should Taxi trigger an error when a difference is recognized?\n* **`blinkDiff.autoApprove`** {`boolean`} [default=false] - Should Taxi auto-approve screenshots when no previous comparison\nexist? Otherwise, the test will ignore this comparison, saving the current build screenshot.\n* **`blinkDiff.approvedPath`** {`string`} [default=cwd] - Path to the approved folder. Defaults to the current working directory.\n* **`blinkDiff.buildPath`** {`string`} [default=approvedPath] - Path to the build folder, holding all the screenshots taken in the recent build.\nDefaults to the approved folder.\n* **`blinkDiff.diffPath`** {`string`} [default=buildPath] - Path to the difference folder, keeping the highlighted differences between\nthe approved image and the build image. Default to the build folder.\n* **`blinkDiff.options`** {`object`} - Default values for Blink-Diff options. See the [Blink-Diff documentation](https://github.com/yahoo/blink-diff#object-usage)\n* **`blinkDiff.batchFailures`** {`boolean`} [default=false] - Failures are batched to the end of the tests when this flag is set.\n* **`blinkDiff.failOnAdditions`** {`boolean`} [default=false] - Fail when no approved screenshot is found.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1294,
            "description": "Clicks on the selected elements",
            "itemtype": "method",
            "name": "elementClick",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "button",
                    "description": "Button that should be pressed when click action is executed.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element\n\n\n**Note**\n\nYou can use the constants available in the mouse-object or submit the following values:\n* 0 - Left Button\n* 1 - Middle Button\n* 2 - Right Button",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1337,
            "description": "Clicks on a specific coordinate relative to the upper-left corner of the selected elements",
            "itemtype": "method",
            "name": "elementClickAt",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "xOffset",
                    "description": "X-offset relative to the left corner of the selected element",
                    "type": "Int"
                },
                {
                    "name": "yOffset",
                    "description": "Y-offset relative to the top corner of the selected element",
                    "type": "Int"
                },
                {
                    "name": "button",
                    "description": "Button that should be pressed when click action is executed.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element\n\n\n**Note**\n\nYou can use the constants available in the mouse-object or submit the following values:\n* 0 - Left Button\n* 1 - Middle Button\n* 2 - Right Button",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1382,
            "description": "Double-clicks on the selected elements",
            "itemtype": "method",
            "name": "elementDblClick",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "button",
                    "description": "Button that should be pressed when click action is executed.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element\n\n\n**Note**\n\nYou can use the constants available in the mouse-object or submit the following values:\n* 0 - Left Button\n* 1 - Middle Button\n* 2 - Right Button",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1425,
            "description": "Double-clicks on a specific coordinate relative to the upper-left corner of the selected elements",
            "itemtype": "method",
            "name": "elementDblClickAt",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "xOffset",
                    "description": "X-offset relative to the left corner of the selected element",
                    "type": "Int"
                },
                {
                    "name": "yOffset",
                    "description": "Y-offset relative to the top corner of the selected element",
                    "type": "Int"
                },
                {
                    "name": "button",
                    "description": "Button that should be pressed when click action is executed.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element\n\n\n**Note**\n\nYou can use the constants available in the mouse-object or submit the following values:\n* 0 - Left Button\n* 1 - Middle Button\n* 2 - Right Button",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1470,
            "description": "Hovers the mouse over the selected elements",
            "itemtype": "method",
            "name": "elementHover",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1504,
            "description": "Hovers the mouse over a specific coordinate relative to the upper-left corner of the selected elements",
            "itemtype": "method",
            "name": "elementHoverAt",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "xOffset",
                    "description": "X-offset relative to the left corner of the selected element",
                    "type": "Int"
                },
                {
                    "name": "yOffset",
                    "description": "Y-offset relative to the top corner of the selected element",
                    "type": "Int"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1544,
            "description": "Triggers a touch-event on the selected elements",
            "itemtype": "method",
            "name": "elementTouch",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1578,
            "description": "Triggers a touch-event on the selected element relative to the upper-left corner of the elements",
            "itemtype": "method",
            "name": "elementTouchAt",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "xOffset",
                    "description": "X-offset relative to the left corner of the selected element",
                    "type": "Int"
                },
                {
                    "name": "yOffset",
                    "description": "Y-offset relative to the top corner of the selected element",
                    "type": "Int"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1614,
            "description": "Taps on the selected elements",
            "itemtype": "method",
            "name": "elementTap",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1648,
            "description": "Double-taps on the selected elements",
            "itemtype": "method",
            "name": "elementDblTap",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1682,
            "description": "Triggers a long-tap on the selected elements",
            "itemtype": "method",
            "name": "elementLongTap",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1720,
            "description": "Executes a script or function within the active browser window, returning the results",
            "methods": "execute",
            "params": [
                {
                    "name": "script",
                    "description": "Script or serializable function that should be executed on the client",
                    "type": "String|function"
                },
                {
                    "name": "args",
                    "description": "List of arguments supplied to the script when executed on the client-side",
                    "type": "*[]",
                    "optional": true
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the result of the script",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`result`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`result`** {`*`} - Result of the evaluated script\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n**Note**\nPlease be aware that a function supplied to the `script` parameter will be serialized, sent to the browser,\nde-serialized, and executed on the client. The lexical scope of the function will be lost and therefore won't\nbe able to capture variables outside of the function scope.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1759,
            "description": "Types complete strings or key-strokes into the active window, effectively sending key-strokes to the focused element",
            "itemtype": "method",
            "name": "sendKeys",
            "params": [
                {
                    "name": "keys",
                    "description": "or key-strokes to send",
                    "type": "String|string[]"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1791,
            "description": "Captures the complete document in a PNG buffer",
            "itemtype": "method",
            "name": "captureDocument",
            "params": [
                {
                    "name": "options",
                    "description": "Options for taking the screenshots. See elementCapture for more information on the screenshot options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute the function on client before each screenshot is taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute the function on client after all screenshots are taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the image-buffer of the document screenshot",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "see": [
                "Chain.elementCapture"
            ],
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`imageBuffer`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`imageBuffer`** {`Buffer`} - Binary buffer of the PNG image\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1831,
            "description": "Captures the current view-port in a PNG buffer",
            "itemtype": "method",
            "name": "captureViewPort",
            "params": [
                {
                    "name": "options",
                    "description": "Options for taking the screenshots. See elementCapture for more information on the screenshot options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute the function on client before each screenshot is taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute the function on client after all screenshots are taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the image-buffer of the view-port screenshot",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "see": [
                "Chain.elementCapture"
            ],
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`imageBuffer`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`imageBuffer`** {`Buffer`} - Binary buffer of the PNG image\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1871,
            "description": "Captures a selected area in a PNG buffer",
            "itemtype": "method",
            "name": "captureArea",
            "params": [
                {
                    "name": "x",
                    "description": "X-coordinate for area. Uses the left corner of the document as default.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate for area. Uses the top corner of the document as default.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "Width of area to be captured. Uses the rest width of the document as the default.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.width-x"
                },
                {
                    "name": "height",
                    "description": "Height of area to be captured. Uses the rest height of the document as the default.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.height-y"
                },
                {
                    "name": "options",
                    "description": "Options for taking the screenshots. See elementCapture for more information on the screenshot options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute the function on client before each screenshot is taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute the function on client after all screenshots are taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the image-buffer of the area screenshot",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "see": [
                "Chain.elementCapture"
            ],
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`imageBuffer`, `element`, `index`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`imageBuffer`** {`Buffer`} - Binary buffer of the PNG image\n* **`element`** {`Element`} - Selected element\n* **`index`** {`int`} - Zero-based index of the selected element",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1915,
            "description": "Compares the whole document with images that were captured previously",
            "itemtype": "method",
            "name": "compareDocument",
            "params": [
                {
                    "name": "title",
                    "description": "Title of the comparison",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the screenshots and compare the data. See elementCapture for more information on the screenshot options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute the function on client before each screenshot is taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute the function on client after all screenshots are taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "compare",
                            "description": "Options for the comparison. See the [Blink-Diff documentation](https://github.com/yahoo/blink-diff)",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Additional identifier to differentiate comparison",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "1"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the reuslt of the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "see": [
                "Chain.elementCapture",
                "Chain.elementCompare"
            ],
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`isSimilar`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`isSimilar`** {`boolean|null`} - Is comparison similar to previous one?\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n---------------------------------------\n\n##Notes\nSee elementCompare for more information on the comparison options.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 1963,
            "description": "Compares the view-port with images previously taken",
            "itemtype": "method",
            "name": "compareViewPort",
            "params": [
                {
                    "name": "title",
                    "description": "Title of the comparison",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the screenshots and compare the data. See elementCapture for more information on the screenshot options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute the function on client before each screenshot is taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute the function on client after all screenshots are taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "compare",
                            "description": "Options for the comparison. See the [Blink-Diff documentation](https://github.com/yahoo/blink-diff)",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Additional identifier to differentiate comparison",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "1"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the result of the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "see": [
                "Chain.elementCapture",
                "Chain.elementCompare"
            ],
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`isSimilar`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`isSimilar`** {`boolean|null`} - Is comparison similar to previous one?\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n---------------------------------------\n\n##Notes\nSee elementCompare for more information on the comparison options.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2011,
            "description": "Compares a specific and fixed area of the document with previously captured images",
            "itemtype": "method",
            "name": "compareArea",
            "params": [
                {
                    "name": "title",
                    "description": "Title of the comparison",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "X-coordinate for area. Uses the left corner of the document as default.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y-coordinate for area. Uses the top corner of the document as default.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "Width of area to be captured. Uses the rest width of the document as the default.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.width-x"
                },
                {
                    "name": "height",
                    "description": "Height of area to be captured. Uses the rest height of the document as the default.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "document.height-y"
                },
                {
                    "name": "options",
                    "description": "Options for the screenshots and compare the data. See elementCapture for more information on the screenshot options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "eachFn",
                            "description": "Will execute the function on client before each screenshot is taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute the function on client after all screenshots are taken",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "compare",
                            "description": "Options for the comparison. See the [Blink-Diff documentation](https://github.com/yahoo/blink-diff)",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Additional identifier to differentiate comparison",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "1"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the result fo the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "see": [
                "Chain.elementCapture",
                "Chain.elementCompare"
            ],
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`isSimilar`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`isSimilar`** {`boolean|null`} - Is comparison similar to previous one?\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n---------------------------------------\n\n##Notes\nSee elementCompare for more information on the comparison options.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2063,
            "description": "Activates a selected element",
            "itemtype": "method",
            "name": "activeElement",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the currently active element",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`element`, `active`Window)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`element`** {`Element`} - Currently active element in the active browser document\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2095,
            "description": "Closes the currently active window, switching the focus to the next available window",
            "itemtype": "method",
            "name": "closeWindow",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2126,
            "description": "Determines the title of the currently active document",
            "itemtype": "method",
            "name": "title",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the title of the document",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`title`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`title`** {`string`} - Title of the active browser document\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2158,
            "description": "Determines the source-code of the currently active document",
            "itemtype": "method",
            "name": "source",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the source-code of the document",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`source`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`source`** {`string`} - Source-code of the active browser document\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2190,
            "description": "Determines the scroll location coordinates within the currently active document",
            "itemtype": "method",
            "name": "scrollLocation",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the scroll-location of the active window",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`coordinates`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`coordinates`** {`object`} - Absolute coordinates of the view-port scroll location\n    * **`x`** {`int`} - Absolute x-coordinate of the view-port scroll location\n    * **`y`** {`int`} - Absolute y-coordinate of the view-port scroll location\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2224,
            "description": "Scrolls to an absolute scroll location within the currently active document",
            "itemtype": "method",
            "name": "scrollTo",
            "params": [
                {
                    "name": "x",
                    "description": "Absolute x-coordinate to scroll to",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Absolute y-coordinate to scroll to",
                    "type": "Int"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2257,
            "description": "Scrolls the currently active document to a specific offset relative to the current scroll location",
            "itemtype": "method",
            "name": "scrollBy",
            "params": [
                {
                    "name": "xOffset",
                    "description": "X-offset to scroll to relative to the current scroll position",
                    "type": "Int"
                },
                {
                    "name": "yOffset",
                    "description": "Y-offset to scroll to relative to the current scroll position",
                    "type": "Int"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2294,
            "description": "Clicks on the active document at the specified absolute coordinates",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "x",
                    "description": "Absolute x-coordinate to click on",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Absolute y-coordinate to click on",
                    "type": "Int"
                },
                {
                    "name": "button",
                    "description": "Button that should be pressed when click action is executed.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n\n**Note**\n\nYou can use the constants available in the mouse-object or submit the following values:\n* 0 - Left Button\n* 1 - Middle Button\n* 2 - Right Button",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2336,
            "description": "Double-clicks on the active document at the specified absolute coordinates",
            "itemtype": "method",
            "name": "dblClick",
            "params": [
                {
                    "name": "x",
                    "description": "Absolute x-coordinate to double-click on",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Absolute y-coordinate to double-click on",
                    "type": "Int"
                },
                {
                    "name": "button",
                    "description": "Button that should be pressed when click action is executed.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n\n**Note**\n\nYou can use the constants available in the mouse-object or submit the following values:\n* 0 - Left Button\n* 1 - Middle Button\n* 2 - Right Button",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2378,
            "description": "Hovers the mouse over the active document at the specified absolute coordinates",
            "itemtype": "method",
            "name": "hover",
            "params": [
                {
                    "name": "x",
                    "description": "Absolute x-coordinate to hover above",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Absolute y-coordinate to hover above",
                    "type": "Int"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2415,
            "description": "Navigates the current document to the supplied URL",
            "itemtype": "method",
            "name": "navigateTo",
            "params": [
                {
                    "name": "url",
                    "description": "URL that should be navigated to",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2447,
            "description": "Determines the current URL of the active document",
            "itemtype": "method",
            "name": "url",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be called with the URL of the document",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`url`** {`string`} - URL of the active document\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2479,
            "description": "Goes forward in the document history, equivalent to a user pressing the forward button within the browser",
            "itemtype": "method",
            "name": "forward",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2510,
            "description": "Goes backward in the document history, equivalent to a user pressing the back button within the browser",
            "itemtype": "method",
            "name": "backward",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2541,
            "description": "Refreshes the current document as if the user pressed the refresh button within the browser",
            "itemtype": "method",
            "name": "refresh",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2576,
            "description": "Determines the text content of the currently displayed dialog",
            "itemtype": "method",
            "name": "dialogText",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the text-content of the dialog",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no dialog available",
                "type": "Error"
            },
            "since": "0.2.1",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`text`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`text`** {`string`} - Text content of the currently displayed dialog\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n**Note**\nThis dialog could be an alert, a prompt, or any other browser dialog that the browser supports.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2611,
            "description": "Sends a string or a list of key-strokes to the currently displayed dialog.\n\nThis is useful when there is a `prompt()` currently open, requesting user input.",
            "itemtype": "method",
            "name": "dialogSendKeys",
            "params": [
                {
                    "name": "keys",
                    "description": "or key-strokes to send",
                    "type": "String|string[]"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no dialog available",
                "type": "Error"
            },
            "since": "0.2.1",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n**Note**\nThis dialog could be an alert, a prompt, or any other browser dialog that the browser supports.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2648,
            "description": "Accepts the currently displayed dialog\n\nIn most cases, this will be the \"OK\" button.",
            "itemtype": "method",
            "name": "dialogAccept",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no dialog available",
                "type": "Error"
            },
            "since": "0.2.1",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n**Note**\nThis dialog could be an alert, a prompt, or any other browser dialog that the browser supports.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2684,
            "description": "Dismisses the currently displayed dialog\n\nIn most cases, this will be the \"Cancel\" button.",
            "itemtype": "method",
            "name": "dialogDismiss",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no dialog available",
                "type": "Error"
            },
            "since": "0.2.1",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window\n\n**Note**\nThis dialog could be an alert, a prompt, or any other browser dialog that the browser supports.",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2724,
            "description": "Activates one of the available frames within the currently active document",
            "itemtype": "method",
            "name": "activateFrame",
            "params": [
                {
                    "name": "id",
                    "description": "Identifier of the frame to activate",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.0",
            "chainable": 1,
            "throws": {
                "description": "When the frame identified by the id doesn't exist",
                "type": "Error"
            },
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2757,
            "description": "Activates the parent frame (i.e. the document) when a frame was previously activated.",
            "itemtype": "method",
            "name": "activateParentFrame",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2791,
            "description": "Activates a window, switching the currently active document\n\nIf you have multiple documents, you need to switch to each in turn to interact with them.\nYou can only interact with the currently active document.\nThat is where this function call comes in handy.",
            "itemtype": "method",
            "name": "activateWindow",
            "params": [
                {
                    "name": "id",
                    "description": "Identifier of a window. This might have been given by some executing JavaScript within the browser.",
                    "type": "String"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.0",
            "chainable": 1,
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`browser`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`browser`** {`Browser`} - The browser session",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2827,
            "description": "Determines a list of available windows/documents within the same browser session",
            "itemtype": "method",
            "name": "windows",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with a list of available windows",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`windows`, `browser`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`windows`** {`WindowHandler[]`} - A list of window objects that are open in the browser\n* **`browser`** {`Browser`} - The browser session",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2862,
            "description": "Puts Taxi to sleep for a specific amount of time",
            "itemtype": "method",
            "name": "sleep",
            "params": [
                {
                    "name": "ms",
                    "description": "Time in milliseconds to wait",
                    "type": "Int"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2891,
            "description": "Completes the session by finishing up comparison tasks and closing the browser window\n\n**Note**\nYou cannot chain after this function call anymore, and the driver will be closed so that\nthere is no way anymore to access the browser through the same session.\nTo get access again to the browser, you need to create a whole new Taxi instance.",
            "itemtype": "method",
            "name": "end",
            "since": "0.2.0",
            "return": {
                "description": "---------------------------------------\n\n##Callback function\n> none",
                "type": "Driver"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2917,
            "description": "Waits for a specific amount of time that an element disappears from the DOM",
            "itemtype": "method",
            "name": "waitForElementNotPresent",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "timeOut",
                    "description": "Max. time-out in waiting on the element",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "10000"
                },
                {
                    "name": "abortOnFailure",
                    "description": "Should an exception be thrown when time-out is reached?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 2958,
            "description": "Waits for a specific amount of time that an element will be hidden",
            "itemtype": "method",
            "name": "waitForElementNotDisplayed",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "timeOut",
                    "description": "Max. time-out in waiting on the element",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "10000"
                },
                {
                    "name": "abortOnFailure",
                    "description": "Should an exception be thrown when time-out is reached?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 3001,
            "description": "Waits for a specific amount of time that an element appears in the DOM",
            "itemtype": "method",
            "name": "waitForElementPresent",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "timeOut",
                    "description": "Max. time-out in waiting on the element",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "10000"
                },
                {
                    "name": "abortOnFailure",
                    "description": "Should an exception be thrown when time-out is reached?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 3042,
            "description": "Waits for a specific amount of time that an element will be shown",
            "itemtype": "method",
            "name": "waitForElementDisplay",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector of DOM elements",
                    "type": "String"
                },
                {
                    "name": "timeOut",
                    "description": "Max. time-out in waiting on the element",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "10000"
                },
                {
                    "name": "abortOnFailure",
                    "description": "Should an exception be thrown when time-out is reached?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "since": "0.2.0",
            "chainable": 1,
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 3086,
            "description": "Determines the size of the active window",
            "itemtype": "method",
            "name": "size",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the size of the window",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.2",
            "chainable": 1,
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`size`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`size`** {`object`} - Size of the selected element\n    * **`width`** {`int`} - Width of the selected element\n    * **`height`** {`int`} - Height of the selected element\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 3120,
            "description": "Re-sizes the active window",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "Width of the window",
                    "type": "Int"
                },
                {
                    "name": "height",
                    "description": "Height of the window",
                    "type": "Int"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.2",
            "chainable": 1,
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 3153,
            "description": "Determines the absolute location of the active window",
            "itemtype": "method",
            "name": "location",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered with the location of the window",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.2",
            "chainable": 1,
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`location`, `activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`location`** {`object`} - Absolute location of the selected element\n    * **`x`** {`int`} - Absolute x-coordinate of the selected element\n    * **`y`** {`int`} - Absolute y-coordinate of the selected element\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 3187,
            "description": "Determines the absolute location of the active window",
            "itemtype": "method",
            "name": "relocate",
            "params": [
                {
                    "name": "x",
                    "description": "Absolute x-coordinate of the next window location",
                    "type": "Int"
                },
                {
                    "name": "y",
                    "description": "Absolute y-coordinate of the next window location",
                    "type": "Int"
                },
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.2",
            "chainable": 1,
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/chain.js",
            "line": 3220,
            "description": "Expands the active window to its maximum size",
            "itemtype": "method",
            "name": "maximize",
            "params": [
                {
                    "name": "callBack",
                    "description": "Callback function that will be triggered when the action completes",
                    "type": "Function",
                    "optional": true
                }
            ],
            "since": "0.2.2",
            "chainable": 1,
            "throws": {
                "description": "When there is no active document available",
                "type": "Error"
            },
            "return": {
                "description": "The chain object\n\n---------------------------------------\n\n##Callback function\n> function (`activeWindow`)\n\n###Scope\n> {`Chain`}\n\n###Parameters\n* **`activeWindow`** {`ActiveWindow`} - Active browser document/window",
                "type": "Chain"
            },
            "class": "Chain",
            "module": "Chain"
        },
        {
            "file": "lib/compatibility.js",
            "line": 28,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Compatibility",
            "module": "WebDriver",
            "submodule": "Compatibility"
        },
        {
            "file": "lib/compatibility.js",
            "line": 41,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Compatibility",
            "module": "WebDriver",
            "submodule": "Compatibility"
        },
        {
            "file": "lib/compatibility.js",
            "line": 61,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Compatibility",
            "module": "WebDriver",
            "submodule": "Compatibility"
        },
        {
            "file": "lib/compatibility.js",
            "line": 72,
            "description": "Returns a Nightwatch.js object",
            "itemtype": "method",
            "name": "nightwatch",
            "return": {
                "description": "",
                "type": "Nightwatch"
            },
            "class": "Compatibility",
            "module": "WebDriver",
            "submodule": "Compatibility"
        },
        {
            "file": "lib/connection.js",
            "line": 50,
            "description": "Fired when a request is made",
            "itemtype": "event",
            "name": "request",
            "params": [
                {
                    "name": "request",
                    "description": "Request options",
                    "type": "Object"
                }
            ],
            "class": "Connection",
            "module": "System"
        },
        {
            "file": "lib/connection.js",
            "line": 57,
            "description": "Fired when a response is received",
            "itemtype": "event",
            "name": "response",
            "params": [
                {
                    "name": "response",
                    "description": "Response data",
                    "type": "Object"
                }
            ],
            "class": "Connection",
            "module": "System"
        },
        {
            "file": "lib/connection.js",
            "line": 69,
            "description": "Session request with automatic parsing for errors",
            "itemtype": "method",
            "name": "parsedRequest",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Session"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "retryCounter",
                    "description": "",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Connection",
            "module": "System"
        },
        {
            "file": "lib/connection.js",
            "line": 92,
            "description": "Session request returning raw value",
            "itemtype": "method",
            "name": "sessionRequest",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Session"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Connection",
            "module": "System"
        },
        {
            "file": "lib/connection.js",
            "line": 112,
            "description": "Plain request",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "urn",
                    "description": "Unified Resource Name",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Buffer"
            },
            "class": "Connection",
            "module": "System"
        },
        {
            "file": "lib/connection.js",
            "line": 143,
            "description": "Parse a response, throwing errors if the status suggests it",
            "params": [
                {
                    "name": "requestData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "res",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "passThrough",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Connection",
            "module": "System"
        },
        {
            "file": "lib/connection.js",
            "line": 228,
            "description": "Gets the next available screenshot id",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Connection",
            "module": "System"
        },
        {
            "file": "lib/connection.js",
            "line": 242,
            "description": "Turns a selenium stack-trace into a string",
            "params": [
                {
                    "name": "stackTrace",
                    "description": "",
                    "type": "Array.<Object>"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Connection",
            "module": "System"
        },
        {
            "file": "lib/connection.js",
            "line": 261,
            "description": "Create connection object according to mode-type",
            "params": [
                {
                    "name": "mode",
                    "description": "(async|sync)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Connection",
            "module": "System"
        },
        {
            "file": "lib/cookie.js",
            "line": 27,
            "description": "The name of the cookie.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 38,
            "description": "The name of the cookie.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 52,
            "description": "The cookie value.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 63,
            "description": "The cookie value.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 77,
            "description": "(Optional) The cookie path.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getPath",
            "return": {
                "description": "",
                "type": "String|undefined"
            },
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 88,
            "description": "Set the cookie path.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "setPath",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 101,
            "description": "(Optional) The domain the cookie is visible to.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getDomain",
            "return": {
                "description": "",
                "type": "String|undefined"
            },
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 112,
            "description": "Set the domain the cookie is visible to.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "setDomain",
            "params": [
                {
                    "name": "domain",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 126,
            "description": "(Optional) Whether the cookie is a secure cookie.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "isSecure",
            "return": {
                "description": "",
                "type": "Boolean|undefined"
            },
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 137,
            "description": "Set whether the cookie is a secure cookie.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "setSecure",
            "params": [
                {
                    "name": "secure",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 151,
            "description": "(Optional) Whether the cookie is an httpOnly cookie.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "isHttpOnly",
            "return": {
                "description": "",
                "type": "Boolean|undefined"
            },
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 162,
            "description": "Set whether the cookie is an httpOnly cookie.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "setHttpOnly",
            "params": [
                {
                    "name": "httpOnly",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 176,
            "description": "(Optional) When the cookie expires, specified in seconds since midnight, January 1, 1970 UTC.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getExpiry",
            "return": {
                "description": "",
                "type": "Number|undefined"
            },
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 187,
            "description": "Set when the cookie expires, specified in seconds since midnight, January 1, 1970 UTC.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "setExpiry",
            "params": [
                {
                    "name": "expiry",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 201,
            "description": "Get cookie data-structure\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookie.js",
            "line": 212,
            "description": "Validate the cookie data",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "completed",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Cookie",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 32,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 45,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 65,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 76,
            "description": "Retrieve all cookies visible to the current page.",
            "itemtype": "method",
            "name": "getCookies",
            "return": {
                "description": "",
                "type": "Array.<Cookie>"
            },
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 90,
            "description": "Retrieve all cookie names visible to the current page.",
            "itemtype": "method",
            "name": "getKeys",
            "return": {
                "description": "",
                "type": "Array.<String>"
            },
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 104,
            "description": "Retrieve a specific cookie by name that is visible to the current page.",
            "itemtype": "method",
            "name": "getCookie",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Cookie|undefined"
            },
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 122,
            "description": "Set a cookie that is visible to the current page.",
            "itemtype": "method",
            "name": "setCookie",
            "params": [
                {
                    "name": "cookie",
                    "description": "",
                    "type": "Cookie"
                }
            ],
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 143,
            "description": "Delete the cookie with the given name.",
            "itemtype": "method",
            "name": "removeCookie",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 154,
            "description": "Delete all cookies visible to the current page.",
            "itemtype": "method",
            "name": "clear",
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/cookieStorage.js",
            "line": 163,
            "description": "Get the number of items in the storage",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CookieStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/driver.js",
            "line": 97,
            "description": "Fired when a request is made",
            "itemtype": "event",
            "name": "request",
            "params": [
                {
                    "name": "request",
                    "description": "Request options",
                    "type": "Object"
                }
            ],
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 104,
            "description": "Fired when a response is received",
            "itemtype": "event",
            "name": "response",
            "params": [
                {
                    "name": "response",
                    "description": "Response data",
                    "type": "Object"
                }
            ],
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 111,
            "description": "Fired when a public method is called",
            "itemtype": "event",
            "name": "method-call",
            "params": [
                {
                    "name": "event",
                    "description": "Method event data",
                    "type": "Object"
                }
            ],
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 118,
            "description": "Fired when the session is destroyed",
            "itemtype": "event",
            "name": "disposed",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 129,
            "description": "Gets the selenium-system status",
            "itemtype": "method",
            "name": "getStatus",
            "params": [
                {
                    "name": "remote",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Status"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 145,
            "description": "Returns a list of the currently active sessions\n\nNote: Appears not to be supported by the selenium-standalone-server!",
            "itemtype": "method",
            "name": "getSessions",
            "params": [
                {
                    "name": "remote",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array.<Session>"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 170,
            "description": "Returns value according to mode",
            "itemtype": "method",
            "name": "_getValue",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 197,
            "description": "Is driver in sync-mode?",
            "itemtype": "method",
            "name": "isSync",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 207,
            "description": "Is driver in async-mode?",
            "itemtype": "method",
            "name": "isAsync",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 218,
            "description": "Gets the name of the browser",
            "itemtype": "method",
            "name": "browserName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 228,
            "description": "Gets the version of the browser",
            "itemtype": "method",
            "name": "browserVersion",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 238,
            "description": "Gets the name of the platform (including platform version)",
            "itemtype": "method",
            "name": "platform",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 248,
            "description": "Gets the name of the device",
            "itemtype": "method",
            "name": "deviceName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 258,
            "description": "Gets the orientation of the device",
            "itemtype": "method",
            "name": "deviceOrientation",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 268,
            "description": "Gets a complete identifier of selected browser (+ version) and platform",
            "itemtype": "method",
            "name": "browserId",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 293,
            "description": "Gets a value of the value registry",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 304,
            "description": "Sets the value of an entry in the registry",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 316,
            "description": "Create a selenium session",
            "itemtype": "method",
            "name": "_createSession",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "desiredCapabilities",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "requiredCapabilities",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Session"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 339,
            "description": "Trigger an event to log the method-call",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "protected",
            "tagname": "",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 357,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 380,
            "description": "Sync-mode of web-driver requests",
            "static": 1,
            "itemtype": "property",
            "name": "MODE_SYNC",
            "type": "{string}",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 389,
            "description": "Async-mode of web-driver requests",
            "static": 1,
            "itemtype": "property",
            "name": "MODE_ASYNC",
            "type": "{string}",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 399,
            "description": "Status of the HTML5 application cache - Uncached",
            "static": 1,
            "itemtype": "property",
            "name": "APPLICATION_CACHE_UNCACHED",
            "type": "{int}",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 408,
            "description": "Status of the HTML5 application cache - Idle",
            "static": 1,
            "itemtype": "property",
            "name": "APPLICATION_CACHE_IDLE",
            "type": "{int}",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 417,
            "description": "Status of the HTML5 application cache - Checking",
            "static": 1,
            "itemtype": "property",
            "name": "APPLICATION_CACHE_CHECKING",
            "type": "{int}",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 426,
            "description": "Status of the HTML5 application cache - Downloading",
            "static": 1,
            "itemtype": "property",
            "name": "APPLICATION_CACHE_DOWNLOADING",
            "type": "{int}",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 435,
            "description": "Status of the HTML5 application cache - Update-ready",
            "static": 1,
            "itemtype": "property",
            "name": "APPLICATION_CACHE_UPDATE_READY",
            "type": "{int}",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 444,
            "description": "Status of the HTML5 application cache - Obsolete",
            "static": 1,
            "itemtype": "property",
            "name": "APPLICATION_CACHE_OBSOLETE",
            "type": "{int}",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 458,
            "description": "Get the session object of current session\n\nNote: This function call is not logged!",
            "itemtype": "method",
            "name": "_session",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Session"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 471,
            "description": "Get the session object of current session",
            "itemtype": "method",
            "name": "session",
            "return": {
                "description": "",
                "type": "Session"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 480,
            "description": "Adjusts the configurations according to the browsers behavior.\n\nNote:\nThis is needed especially when screenshots should be taken since\nbrowsers behave here very different from each other.\n\nNeeds to be called only once per taxi instance.",
            "itemtype": "method",
            "name": "adjust",
            "params": [
                {
                    "name": "options",
                    "description": "Preparation options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url",
                            "description": "Default website for adjustment for browser",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "'http://www.example.org'"
                        },
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "since": "0.2.6",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 514,
            "description": "Gets the browser object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "browser",
            "return": {
                "description": "",
                "type": "Browser"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 526,
            "description": "Get the time-out object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "timeOut",
            "return": {
                "description": "",
                "type": "TimeOut"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 538,
            "description": "Get the helpers object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "helpers",
            "return": {
                "description": "",
                "type": "Utils"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 550,
            "description": "Get the chain object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "chain",
            "return": {
                "description": "",
                "type": "Chain"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 561,
            "description": "Get the compatibility object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "compatibility",
            "return": {
                "description": "",
                "type": "Compatibility"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 573,
            "description": "Get the status of the html5 application cache",
            "itemtype": "method",
            "name": "getApplicationCacheStatus",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 584,
            "description": "Get the log for a given log type. Log buffer is reset after each request.",
            "itemtype": "method",
            "name": "getLogs",
            "params": [
                {
                    "name": "logType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array.<LogEntry>"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 603,
            "description": "Get available log types",
            "itemtype": "method",
            "name": "getLogTypes",
            "return": {
                "description": "",
                "type": "Array.<String>"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 614,
            "description": "End this Driver session",
            "itemtype": "method",
            "name": "dispose",
            "params": [
                {
                    "name": "status",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 643,
            "description": "End this Driver session\n\nAlias for `dispose`",
            "itemtype": "method",
            "name": "quit",
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 652,
            "description": "Get the Session-Storage object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "sessionStorage",
            "return": {
                "description": "",
                "type": "SessionStorage"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 664,
            "description": "Sauce Labs Methods",
            "itemtype": "method",
            "name": "sauceJobUpdate",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 709,
            "description": "Extract a session ID and the accepted capabilities from a server response",
            "params": [
                {
                    "name": "res",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "`{sessionId: String, capabilities: Object}`",
                "type": "Object"
            },
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/driver.js",
            "line": 731,
            "description": "Setup debug output",
            "params": [
                {
                    "name": "driver",
                    "description": "",
                    "type": "Driver"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Driver",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 38,
            "description": "Class-name selector type",
            "static": 1,
            "itemtype": "property",
            "name": "SELECTOR_CLASS",
            "type": "{string}",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 47,
            "description": "Css selector type, using the native css selector support",
            "static": 1,
            "itemtype": "property",
            "name": "SELECTOR_CSS",
            "type": "{string}",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 56,
            "description": "Id selector type",
            "static": 1,
            "itemtype": "property",
            "name": "SELECTOR_ID",
            "type": "{string}",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 65,
            "description": "Name selector type",
            "static": 1,
            "itemtype": "property",
            "name": "SELECTOR_NAME",
            "type": "{string}",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 74,
            "description": "Link text selector type, finding a link that fits the selector.\nThe full link-text needs to match.",
            "static": 1,
            "itemtype": "property",
            "name": "SELECTOR_LINK_TEXT",
            "type": "{string}",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 84,
            "description": "Partial-link text selector type, finding a link that partially fits the selector.\nOnly a part of the link-text needs to match.",
            "static": 1,
            "itemtype": "property",
            "name": "SELECTOR_PARTIAL",
            "type": "{string}",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 94,
            "description": "Tag-name selector type",
            "static": 1,
            "itemtype": "property",
            "name": "SELECTOR_TAG",
            "type": "{string}",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 103,
            "description": "XPath selector type",
            "static": 1,
            "itemtype": "property",
            "name": "SELECTOR_XPATH",
            "type": "{string}",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 117,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "protected",
            "tagname": "",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 131,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 151,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 162,
            "description": "Gets the mouse object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "mouse",
            "return": {
                "description": "",
                "type": "Mouse"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 173,
            "description": "Gets the touch object.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "touch",
            "return": {
                "description": "",
                "type": "Touch"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 185,
            "description": "Gets the value of the element id\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "elementId",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 196,
            "description": "Gets the internal selenium handler object\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "elementHandler",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 208,
            "description": "Gets the value of an attribute.",
            "itemtype": "method",
            "name": "getAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 220,
            "description": "Does the element have a specific class?",
            "itemtype": "method",
            "name": "hasClass",
            "params": [
                {
                    "name": "classStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 234,
            "description": "Gets a list of used classes",
            "itemtype": "method",
            "name": "getClasses",
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 248,
            "description": "Gets the text body of an element.",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 258,
            "description": "Does the element have a specific text-string?",
            "itemtype": "method",
            "name": "hasText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 273,
            "description": "Gets the value of an element.\n\nNote:\nThe element needs to have a 'value' attribute for this to work.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 287,
            "description": "Gets the tag-name of an element.",
            "itemtype": "method",
            "name": "getTagName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 297,
            "description": "Query the value of an element's computed CSS property. The CSS property to query\nshould be specified using the CSS property name, not the JavaScript property name\n(e.g. background-color instead of backgroundColor).",
            "itemtype": "method",
            "name": "getCssValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 311,
            "description": "Return true if the element is currently displayed on the page",
            "itemtype": "method",
            "name": "isDisplayed",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 322,
            "description": "Return true if the form element is selected",
            "itemtype": "method",
            "name": "isSelected",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 332,
            "description": "Return true if the current element is equal to the supplied element",
            "itemtype": "method",
            "name": "isEqual",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 344,
            "description": "Return true if the form element is enabled",
            "itemtype": "method",
            "name": "isEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 354,
            "description": "Return true if the form element is disabled",
            "itemtype": "method",
            "name": "isDisabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 369,
            "description": "Type a string of characters into an input",
            "itemtype": "method",
            "name": "sendKeys",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String|Array.<String>"
                }
            ],
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 381,
            "description": "Clear the value of an input",
            "itemtype": "method",
            "name": "clear",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 391,
            "description": "Submit a form element",
            "itemtype": "method",
            "name": "submit",
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 401,
            "description": "Gets the size of an element",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "`{width: number, height: number}`",
                "type": "Object"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 411,
            "description": "Gets the position of an element",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "`{x: number, y: number}`",
                "type": "Object"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 421,
            "description": "Gets the position of an element in the current view",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "`{x: number, y: number}`",
                "type": "Object"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 431,
            "description": "Get the frame of an element",
            "itemtype": "method",
            "name": "getFrame",
            "return": {
                "description": "`{x: number, y: number, width: number, height: number}`",
                "type": "Object"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 450,
            "description": "Gets the absolute center of an element",
            "itemtype": "method",
            "name": "getAbsoluteCenter",
            "return": {
                "description": "`{x: number, y: number}`",
                "type": "Object"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 465,
            "description": "Gets the relative center of an element",
            "itemtype": "method",
            "name": "getRelativeCenter",
            "return": {
                "description": "`{x: number, y: number}`",
                "type": "Object"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 481,
            "description": "Gets an element via a selector.\nWill throw an error if the element does not exist.",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "[selectorType='css",
                    "description": "selector']",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Element"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 502,
            "description": "Gets elements via a selector.",
            "itemtype": "method",
            "name": "getElements",
            "params": [
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "[selectorType='css",
                    "description": "selector']",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array.<Element>"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 524,
            "description": "Does a specific element exist?",
            "itemtype": "method",
            "name": "hasElement",
            "params": [
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "[selectorType='css",
                    "description": "selector']",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 540,
            "description": "Takes a screenshot of the document",
            "itemtype": "method",
            "name": "capture",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "allPadding",
                            "description": "Padding for all sides",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "hPadding",
                            "description": "Padding on left and right side of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "vPadding",
                            "description": "Padding on the top and on the bottom of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "leftPadding",
                            "description": "Padding on the left of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "rightPadding",
                            "description": "Padding on the right of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "topPadding",
                            "description": "Padding on the top of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "bottomPadding",
                            "description": "Padding on the bottom of the element",
                            "type": "Int",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Binary image buffer",
                "type": "Buffer"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 576,
            "description": "Takes a screenshot of the document",
            "itemtype": "method",
            "name": "screenshot",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use capture.",
            "return": {
                "description": "Binary image buffer",
                "type": "Buffer"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/element.js",
            "line": 586,
            "description": "Compares the screenshot of the element with a previous screenshot, showing differences between them",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "title",
                    "description": "Unique title for comparison",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "horizontalPadding",
                            "description": "Padding of the document for adjustment",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "eachFn",
                            "description": "Will execute method on client before each screenshot is taken. First parameter is index of screenshot.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "completeFn",
                            "description": "Will execute method on client after all screenshots are taken.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "blockOuts",
                            "description": "List of areas/elements that should be blocked-out",
                            "type": "Object[]|Element[]|string[]",
                            "optional": true
                        },
                        {
                            "name": "blockOutColor",
                            "description": "Color to be used for blocking-out areas {red, green, blue, alpha}",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "black"
                        },
                        {
                            "name": "wait",
                            "description": "Wait in ms before each screenshot",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "compare",
                            "description": "Options for the comparison. See Blink-Diff documentation.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "id",
                                    "description": "Additional identifier to differentiate comparisons even more.",
                                    "type": "Object",
                                    "optional": true,
                                    "optdefault": "1"
                                }
                            ]
                        },
                        {
                            "name": "allPadding",
                            "description": "Padding for all sides",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "hPadding",
                            "description": "Padding on left and right side of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "vPadding",
                            "description": "Padding on the top and on the bottom of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "leftPadding",
                            "description": "Padding on the left of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "rightPadding",
                            "description": "Padding on the right of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "topPadding",
                            "description": "Padding on the top of the element",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "bottomPadding",
                            "description": "Padding on the bottom of the element",
                            "type": "Int",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Are the screenshots the same? (NULL if there is nothing to compare to)",
                "type": "Boolean|null"
            },
            "class": "Element",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/errors.js",
            "line": 13,
            "description": "List of errors",
            "type": "{Object}",
            "class": "Frame",
            "module": "WebDriver"
        },
        {
            "file": "lib/errors.js",
            "line": 49,
            "description": "Extracts the error message from a response body",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Frame",
            "module": "WebDriver"
        },
        {
            "file": "lib/frame.js",
            "line": 27,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Frame",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/frame.js",
            "line": 40,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Frame",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/frame.js",
            "line": 60,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Frame",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/frame.js",
            "line": 71,
            "description": "Change focus to the default context on the page",
            "itemtype": "method",
            "name": "activateDefault",
            "class": "Frame",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/frame.js",
            "line": 80,
            "description": "Change focus to a specific frame on the page",
            "itemtype": "method",
            "name": "activate",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Frame",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/frame.js",
            "line": 90,
            "description": "Change focus to the parent context. If the current context is the top level browsing context, the context remains unchanged.",
            "itemtype": "method",
            "name": "activateParent",
            "class": "Frame",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 29,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 42,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 62,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 73,
            "description": "Move the mouse by an offset of the specified element. If no element is specified,\nthe move is relative to the current mouse cursor. If an element is provided but\nno offset, the mouse will be moved to the center of the element. If the element\nis not visible, it will be scrolled into view.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_moveTo",
            "params": [
                {
                    "name": "elementId",
                    "description": "",
                    "type": "String|undefined"
                },
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number|undefined"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number|undefined"
                }
            ],
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 99,
            "description": "Move the mouse by an offset relative to the current mouse cursor position",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 113,
            "description": "Click any mouse button at the current location of the mouse cursor",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 125,
            "description": "Click any mouse button at an offset relative to the current location of the mouse cursor",
            "itemtype": "method",
            "name": "clickAt",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 139,
            "description": "Double-clicks at the current location of the mouse cursor",
            "itemtype": "method",
            "name": "doubleClick",
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 148,
            "description": "Double-clicks at the current location of the mouse cursor",
            "itemtype": "method",
            "name": "doubleClickAt",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 162,
            "description": "Click and hold the any mouse button at the current location of the mouse cursor",
            "itemtype": "method",
            "name": "buttonDown",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 174,
            "description": "Click and hold the any mouse button relative to the current location of the mouse cursor",
            "itemtype": "method",
            "name": "buttonDownAt",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 189,
            "description": "Releases the mouse button previously held at the current location of the mouse cursor",
            "itemtype": "method",
            "name": "buttonUp",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalMouse.js",
            "line": 201,
            "description": "Releases the mouse button previously held at the current location of the mouse cursor",
            "itemtype": "method",
            "name": "buttonUpAt",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "GlobalMouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 26,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 39,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 59,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 70,
            "description": "Tap on an element",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_tap",
            "params": [
                {
                    "name": "elementId",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 81,
            "description": "Double tap on an element",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_doubleTap",
            "params": [
                {
                    "name": "elementId",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 92,
            "description": "Long tap on an element",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_longTap",
            "params": [
                {
                    "name": "elementId",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 104,
            "description": "Finger down on the screen at the given position",
            "itemtype": "method",
            "name": "down",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 117,
            "description": "Finger up on the screen at the given position",
            "itemtype": "method",
            "name": "up",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 131,
            "description": "Move finger on the screen to the given position",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 145,
            "description": "Scroll on the touch screen using finger based motion events according to an offset",
            "itemtype": "method",
            "name": "scroll",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/globalTouch.js",
            "line": 158,
            "description": "Flick on the touch screen using finger motion events. This flick command starts at a particular screen location.",
            "itemtype": "method",
            "name": "flick",
            "params": [
                {
                    "name": "xSpeed",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ySpeed",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "GlobalTouch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/ime.js",
            "line": 26,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "IME",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/ime.js",
            "line": 39,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "IME",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/ime.js",
            "line": 59,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "IME",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/ime.js",
            "line": 70,
            "description": "List all available engines on the machine. To use an engine, it has to be present in this list.",
            "itemtype": "method",
            "name": "getEngines",
            "return": {
                "description": "",
                "type": "Array.<String>"
            },
            "class": "IME",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/ime.js",
            "line": 81,
            "description": "Get the name of the active IME engine. The name string is platform specific.",
            "itemtype": "method",
            "name": "getActiveEngine",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "IME",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/ime.js",
            "line": 91,
            "description": "Indicates whether IME input is active at the moment (not if it's available)",
            "itemtype": "method",
            "name": "isActivated",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "IME",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/ime.js",
            "line": 102,
            "description": "Make an engines that is available (appears on the list returned by\ngetAvailableEngines) active. After this call, the engine will be\nadded to the list of engines loaded in the IME daemon and the input\nsent using sendKeys will be converted by the active engine.\n\nNote that this is a platform-independent method of activating IME\n(the platform-specific way being using keyboard shortcuts)",
            "itemtype": "method",
            "name": "activate",
            "params": [
                {
                    "name": "engine",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "IME",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/ime.js",
            "line": 119,
            "description": "De-activates the currently-active IME engine",
            "itemtype": "method",
            "name": "deactivate",
            "class": "IME",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/json.js",
            "line": 18,
            "description": "Parse a JSON string to a js-value\n\nNote: Small wrapper around standard JSON parser",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Keys",
            "module": "WebDriver"
        },
        {
            "file": "lib/json.js",
            "line": 39,
            "description": "Convert a js-value to a JSON string",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Keys",
            "module": "WebDriver"
        },
        {
            "file": "lib/keys.js",
            "line": 10,
            "description": "NULL key",
            "itemtype": "property",
            "name": "NULL",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 20,
            "description": "Break key",
            "itemtype": "property",
            "name": "BREAK",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 29,
            "description": "Pause key",
            "itemtype": "property",
            "name": "PAUSE",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 38,
            "description": "Help key",
            "itemtype": "property",
            "name": "HELP",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 47,
            "description": "Clear key",
            "itemtype": "property",
            "name": "CLEAR",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 57,
            "description": "Backspace key",
            "itemtype": "property",
            "name": "BACKSPACE",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 66,
            "description": "Escape key",
            "itemtype": "property",
            "name": "ESCAPE",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 75,
            "description": "Tab key",
            "itemtype": "property",
            "name": "TAB",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 85,
            "description": "Return key (not enter)",
            "itemtype": "property",
            "name": "RETURN",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 94,
            "description": "Enter key (not return)",
            "itemtype": "property",
            "name": "ENTER",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 104,
            "description": "Shift key",
            "itemtype": "property",
            "name": "SHIFT",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 113,
            "description": "Control key",
            "itemtype": "property",
            "name": "CONTROL",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 122,
            "description": "Alternate key",
            "itemtype": "property",
            "name": "ALT",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 132,
            "description": "Space-bar key",
            "itemtype": "property",
            "name": "SPACE",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 142,
            "description": "Page-up key",
            "itemtype": "property",
            "name": "PAGE_UP",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 151,
            "description": "Page-down key",
            "itemtype": "property",
            "name": "PAGE_DOWN",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 161,
            "description": "End key",
            "itemtype": "property",
            "name": "END",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 170,
            "description": "Home key",
            "itemtype": "property",
            "name": "HOME",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 180,
            "description": "Left-arrow key",
            "itemtype": "property",
            "name": "LEFT_ARROW",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 189,
            "description": "Up-arrow key",
            "itemtype": "property",
            "name": "UP_ARROW",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 198,
            "description": "Right-arrow key",
            "itemtype": "property",
            "name": "RIGHT_ARROW",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 207,
            "description": "Down-arrow key",
            "itemtype": "property",
            "name": "DOWN_ARROW",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 217,
            "description": "Insert key",
            "itemtype": "property",
            "name": "INSERT",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 226,
            "description": "Delete key",
            "itemtype": "property",
            "name": "DELETE",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 236,
            "description": "Semicolon key",
            "itemtype": "property",
            "name": "SEMICOLON",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 245,
            "description": "Equals key",
            "itemtype": "property",
            "name": "EQUALS",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 255,
            "description": "Number 0 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD0",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 264,
            "description": "Number 1 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD1",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 273,
            "description": "Number 2 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD2",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 282,
            "description": "Number 3 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD3",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 291,
            "description": "Number 4 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD4",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 300,
            "description": "Number 5 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD5",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 309,
            "description": "Number 6 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD6",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 318,
            "description": "Number 7 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD7",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 327,
            "description": "Number 8 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD8",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 336,
            "description": "Number 9 on number-pad",
            "itemtype": "property",
            "name": "NUMPAD9",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 346,
            "description": "\"*\" key",
            "itemtype": "property",
            "name": "MULTIPLY",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 355,
            "description": "\"+\" key",
            "itemtype": "property",
            "name": "ADD",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 364,
            "description": "\"-\" key",
            "itemtype": "property",
            "name": "SUBTRACT",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 373,
            "description": "\"/\" key",
            "itemtype": "property",
            "name": "DIVIDE",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 382,
            "description": "Separator key (Locale independent)",
            "itemtype": "property",
            "name": "SEPARATOR",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 391,
            "description": "\".\" key",
            "itemtype": "property",
            "name": "DECIMAL",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 401,
            "description": "F1 key",
            "itemtype": "property",
            "name": "F1",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 410,
            "description": "F2 key",
            "itemtype": "property",
            "name": "F2",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 419,
            "description": "F3 key",
            "itemtype": "property",
            "name": "F3",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 428,
            "description": "F4 key",
            "itemtype": "property",
            "name": "F4",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 437,
            "description": "F5 key",
            "itemtype": "property",
            "name": "F5",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 446,
            "description": "F6 key",
            "itemtype": "property",
            "name": "F6",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 455,
            "description": "F7 key",
            "itemtype": "property",
            "name": "F7",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 464,
            "description": "F8 key",
            "itemtype": "property",
            "name": "F8",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 473,
            "description": "F9 key",
            "itemtype": "property",
            "name": "F9",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 482,
            "description": "F10 key",
            "itemtype": "property",
            "name": "F10",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 491,
            "description": "F11 key",
            "itemtype": "property",
            "name": "F11",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 500,
            "description": "F12 key",
            "itemtype": "property",
            "name": "F12",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 510,
            "description": "\"Windows\" key",
            "itemtype": "property",
            "name": "WINDOWS",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/keys.js",
            "line": 519,
            "description": "\"Command\" (Apple) key",
            "itemtype": "property",
            "name": "COMMAND",
            "static": 1,
            "type": "{String}",
            "class": "Keys",
            "module": "WebDriver",
            "submodule": "Core"
        },
        {
            "file": "lib/localStorage.js",
            "line": 26,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "LocalStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/localStorage.js",
            "line": 39,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "LocalStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/localStorage.js",
            "line": 59,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "LocalStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/localStorage.js",
            "line": 70,
            "description": "Get all keys of the storage",
            "itemtype": "method",
            "name": "getKeys",
            "return": {
                "description": "",
                "type": "Array.<String>"
            },
            "class": "LocalStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/localStorage.js",
            "line": 80,
            "description": "Get the storage item for the given key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "LocalStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/localStorage.js",
            "line": 92,
            "description": "Set the storage item for the given key",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LocalStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/localStorage.js",
            "line": 105,
            "description": "Remove the storage item for the given key",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LocalStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/localStorage.js",
            "line": 116,
            "description": "Clear the storage",
            "itemtype": "method",
            "name": "clear",
            "class": "LocalStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/localStorage.js",
            "line": 125,
            "description": "Get the number of items in the storage",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "LocalStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/log.js",
            "line": 14,
            "description": "Wraps every method in an object with a logger",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LogEntry",
            "module": "WebDriver"
        },
        {
            "file": "lib/log.js",
            "line": 34,
            "description": "Wraps one method with a function that logs input and output",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "LogEntry",
            "module": "WebDriver"
        },
        {
            "file": "lib/logEntry.js",
            "line": 23,
            "description": "Log level 'All'",
            "static": 1,
            "itemtype": "property",
            "name": "LEVEL_ALL",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 32,
            "description": "Log level 'Debug'",
            "static": 1,
            "itemtype": "property",
            "name": "LEVEL_DEBUG",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 41,
            "description": "Log level 'Info'",
            "static": 1,
            "itemtype": "property",
            "name": "LEVEL_INFO",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 50,
            "description": "Log level 'Warning'",
            "static": 1,
            "itemtype": "property",
            "name": "LEVEL_WARNING",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 59,
            "description": "Log level 'Severe'",
            "static": 1,
            "itemtype": "property",
            "name": "LEVEL_SEVERE",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 68,
            "description": "Log level 'Off'. Nothing will be logged.",
            "static": 1,
            "itemtype": "property",
            "name": "LEVEL_OFF",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 78,
            "description": "Logs from the client side implementation of the WebDriver protocol (e.g. the Java bindings)",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE_CLIENT",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 87,
            "description": "Logs from the internals of the driver (e.g. FirefoxDriver internals)",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE_DRIVER",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 96,
            "description": "Javascript console logs from the browser",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE_BROWSER",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 105,
            "description": "Logs from within the selenium server.",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE_SERVER",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 114,
            "description": "Logs relating to the performance characteristics of the page under test (e.g. resource load timings)",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE_PERFORMANCE",
            "type": "{string}",
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 128,
            "description": "The timestamp of the entry.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getTimestamp",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 139,
            "description": "The log level of the entry.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getLevel",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/logEntry.js",
            "line": 150,
            "description": "The log message.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getMessage",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "LogEntry",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/mouse.js",
            "line": 29,
            "description": "Left mouse button",
            "static": 1,
            "itemtype": "property",
            "name": "BUTTON_LEFT",
            "type": "{int}",
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 38,
            "description": "Middle mouse button. It is the scroll button on some mouses.",
            "static": 1,
            "itemtype": "property",
            "name": "BUTTON_MIDDLE",
            "type": "{int}",
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 47,
            "description": "Right mouse button",
            "static": 1,
            "itemtype": "property",
            "name": "BUTTON_RIGHT",
            "type": "{int}",
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 61,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 74,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 94,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 105,
            "description": "Click any mouse button at the center of the element",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 121,
            "description": "Click any mouse button at a specified offset of the element",
            "itemtype": "method",
            "name": "clickAt",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 136,
            "description": "Move the mouse by an offset of the element",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 149,
            "description": "Move the mouse to the center of the element",
            "itemtype": "method",
            "name": "moveToCenter",
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 159,
            "description": "Double-clicks the element at the center of the element",
            "itemtype": "method",
            "name": "doubleClick",
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 170,
            "description": "Double-clicks the element at a specified offset of the element",
            "itemtype": "method",
            "name": "doubleClickAt",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 184,
            "description": "Click and hold any mouse button at the center of the element",
            "itemtype": "method",
            "name": "buttonDown",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 196,
            "description": "Click and hold any mouse button at a specified offset of the element",
            "itemtype": "method",
            "name": "buttonDownAt",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 211,
            "description": "Releases a mouse button at the center of the element",
            "itemtype": "method",
            "name": "buttonUp",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/mouse.js",
            "line": 223,
            "description": "Releases a mouse button at a specified offset of the element",
            "itemtype": "method",
            "name": "buttonUpAt",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "button",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Mouse.BUTTON_LEFT"
                }
            ],
            "class": "Mouse",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/navigator.js",
            "line": 27,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Navigator",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/navigator.js",
            "line": 40,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Navigator",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/navigator.js",
            "line": 60,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Navigator",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/navigator.js",
            "line": 71,
            "description": "Navigate forwards in the browser history, if possible.",
            "itemtype": "method",
            "name": "forward",
            "class": "Navigator",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/navigator.js",
            "line": 80,
            "description": "Navigate backwards in the browser history, if possible.",
            "itemtype": "method",
            "name": "backward",
            "class": "Navigator",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/navigator.js",
            "line": 89,
            "description": "Refreshes the browser",
            "itemtype": "method",
            "name": "refresh",
            "class": "Navigator",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/navigator.js",
            "line": 99,
            "description": "Get the current url that the browser is displaying",
            "itemtype": "method",
            "name": "getUrl",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Navigator",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/navigator.js",
            "line": 109,
            "description": "Navigates the browser to the specified path\n\n - if `path` begins with a \"/\" it is relative to `options.base`\n - if `path` begins with \"http\" it is absolute\n - otherwise it is relative to the current path",
            "itemtype": "method",
            "name": "navigateTo",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Navigator",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/navigator.js",
            "line": 133,
            "description": "Navigates the browser to the specified path\n\nAlias for `navigateTo`",
            "itemtype": "method",
            "name": "setUrl",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Navigator",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/session.js",
            "line": 27,
            "description": "Request for a specific browser",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_BROWSER_NAME",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 36,
            "description": "Request for a specific browser version",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_VERSION",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 45,
            "description": "Request for a specific platform",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_PLATFORM",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 54,
            "description": "Request for JavaScript to be enabled in the browser",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_JAVASCRIPT_ENABLED",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 63,
            "description": "Request for screenshot support",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_TAKES_SCREENSHOT",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 72,
            "description": "Request for alert handling support",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_HANDLES_ALERT",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 81,
            "description": "Request for the browser database to be enabled",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_DATABASE_ENABLED",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 90,
            "description": "Request for the browser location API to be enabled",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_LOCATION_CONTEXT_ENABLED",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 99,
            "description": "Request for the browser cache to be enabled",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_APPLICATION_CACHE_ENABLED",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 108,
            "description": "Request for the ability to query the browsers connectivity",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_BROWSER_CONNECTION_ENABLED",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 117,
            "description": "Request for native css selector support.\n\nNote: This should always be used since this is the default for Taxi.",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_CSS_SELECTORS_ENABLED",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 128,
            "description": "Request for the web-storage to be enabled",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_WEB_STORAGE_ENABLED",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 137,
            "description": "Request for a browser that can be rotated (orientation).",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_ROTATABLE",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 146,
            "description": "Request for the browser to accept any ssl certificates",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_ACCEPT_SSL_CERTS",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 155,
            "description": "Request for native-events",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_NATIVE_EVENTS",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 164,
            "description": "Request for a proxy",
            "static": 1,
            "itemtype": "property",
            "name": "CAPABILITY_PROXY",
            "type": "{String}",
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 178,
            "description": "Get the session-id.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "id",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/session.js",
            "line": 189,
            "description": "Get all the accepted capabilities.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "capabilities",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Session",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/sessionStorage.js",
            "line": 26,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "SessionStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/sessionStorage.js",
            "line": 39,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "SessionStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/sessionStorage.js",
            "line": 59,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "SessionStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/sessionStorage.js",
            "line": 70,
            "description": "Get all keys of the storage",
            "itemtype": "method",
            "name": "getKeys",
            "return": {
                "description": "",
                "type": "Array.<String>"
            },
            "class": "SessionStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/sessionStorage.js",
            "line": 80,
            "description": "Get the storage item for the given key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "SessionStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/sessionStorage.js",
            "line": 92,
            "description": "Set the storage item for the given key",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "SessionStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/sessionStorage.js",
            "line": 105,
            "description": "Remove the storage item for the given key",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "SessionStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/sessionStorage.js",
            "line": 116,
            "description": "Clear the storage",
            "itemtype": "method",
            "name": "clear",
            "class": "SessionStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/sessionStorage.js",
            "line": 125,
            "description": "Get the number of items in the storage",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "SessionStorage",
            "module": "WebDriver",
            "submodule": "Storage"
        },
        {
            "file": "lib/status.js",
            "line": 23,
            "description": "A generic release label\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getBuildVersion",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Status",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/status.js",
            "line": 34,
            "description": "The revision of the local source control client from which the server was built\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getBuildRevision",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Status",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/status.js",
            "line": 45,
            "description": "A timestamp from when the server was built.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getBuildTime",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Status",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/status.js",
            "line": 57,
            "description": "The current system architecture.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getOSArchitecture",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Status",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/status.js",
            "line": 68,
            "description": "The name of the operating system the server is currently running on: \"windows\", \"linux\", etc.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getOSName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Status",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/status.js",
            "line": 79,
            "description": "The operating system version.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "getOSVersion",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Status",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 31,
            "description": "Synchronous script execution timeout",
            "static": 1,
            "itemtype": "property",
            "name": "TIMEOUT_TYPE_SCRIPT",
            "type": "{String}",
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 40,
            "description": "Asynchronous script execution timeout",
            "static": 1,
            "itemtype": "property",
            "name": "TIMEOUT_TYPE_ASYNC_SCRIPT",
            "type": "{String}",
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 49,
            "description": "Page load timeout",
            "static": 1,
            "itemtype": "property",
            "name": "TIMEOUT_TYPE_PAGE_LOAD",
            "type": "{String}",
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 58,
            "description": "Implicit wait timeout.\nImplicit waits are applied for all requests.",
            "static": 1,
            "itemtype": "property",
            "name": "TIMEOUT_TYPE_IMPLICIT",
            "type": "{String}",
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 73,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 86,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 106,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 117,
            "description": "Set a time-out",
            "itemtype": "method",
            "name": "setTimeOut",
            "params": [
                {
                    "name": "timeOutType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ms",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 140,
            "description": "Set multiple time-outs at once",
            "itemtype": "method",
            "name": "setTimeOuts",
            "params": [
                {
                    "name": "timeOuts",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 167,
            "description": "Set the amount of time, in milliseconds, that scripts are permitted\nto run before they are aborted and a \"Timeout\" error is returned to the client.",
            "itemtype": "method",
            "name": "setScriptTimeOut",
            "params": [
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 180,
            "description": "Set the amount of time, in milliseconds, that asynchronous scripts are permitted\nto run before they are aborted and a \"Timeout\" error is returned to the client.",
            "itemtype": "method",
            "name": "setAsyncScriptTimeOut",
            "params": [
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 193,
            "description": "Set the amount of time, in milliseconds, that a page is permitted to be loaded\nbefore they it is aborted and a \"Timeout\" error is returned to the client.",
            "itemtype": "method",
            "name": "setPageLoadTimeOut",
            "params": [
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/timeOut.js",
            "line": 206,
            "description": "Set the amount of time, in milliseconds, that scripts executed are permitted\nto run before they are aborted and a \"Timeout\" error is returned to the client.",
            "itemtype": "method",
            "name": "setImplicitTimeOut",
            "params": [
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "TimeOut",
            "module": "WebDriver",
            "submodule": "System"
        },
        {
            "file": "lib/touch.js",
            "line": 29,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 42,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 62,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 73,
            "description": "Tap with the finger on the element",
            "itemtype": "method",
            "name": "tap",
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 82,
            "description": "Double tap with the finger on the element",
            "itemtype": "method",
            "name": "doubleTap",
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 91,
            "description": "Long tap with the finger on the element",
            "itemtype": "method",
            "name": "longTap",
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 101,
            "description": "Finger down on the screen at an offset relative to the element",
            "itemtype": "method",
            "name": "down",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 116,
            "description": "Finger down on the screen at the center of the element",
            "itemtype": "method",
            "name": "downAtCenter",
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 128,
            "description": "Finger up on the screen at an offset relative to the element",
            "itemtype": "method",
            "name": "up",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 143,
            "description": "Finger up on the screen at the center of the element",
            "itemtype": "method",
            "name": "upAtCenter",
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 155,
            "description": "Move finger to an offset relative to the element",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "xOffset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "yOffset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/touch.js",
            "line": 170,
            "description": "Move finger to the center of the element",
            "itemtype": "method",
            "name": "moveToCenter",
            "class": "Touch",
            "module": "WebDriver",
            "submodule": "Interaction"
        },
        {
            "file": "lib/utils.js",
            "line": 29,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/utils.js",
            "line": 42,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/utils.js",
            "line": 62,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/utils.js",
            "line": 73,
            "description": "Waits until an event occurs or the time runs out",
            "params": [
                {
                    "name": "fn",
                    "description": "Function that validates condition.",
                    "type": "Function"
                },
                {
                    "name": "timeOut",
                    "description": "Time in ms for the max. time to wait until an error occurs.",
                    "type": "Int"
                },
                {
                    "name": "wait",
                    "description": "Time in ms of wait between each check.",
                    "type": "Int"
                },
                {
                    "name": "timeOutFn",
                    "description": "Called when timeout reached",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "Error message",
                    "type": "String"
                }
            ],
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/utils.js",
            "line": 105,
            "description": "Maps values to some other values synchronously and asynchronously",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "list",
                    "description": "List of data",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "Function to be called on each entry",
                    "type": "Function"
                }
            ],
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/utils.js",
            "line": 135,
            "description": "Evaluates the value according to the execution mode the driver is in",
            "itemtype": "method",
            "name": "when",
            "params": [
                {
                    "name": "value",
                    "description": "Value that needs to be evaluated. This could possibly be the value itself or a promise.",
                    "type": "*"
                },
                {
                    "name": "fn",
                    "description": "Function to be called with the evaluated value",
                    "type": "Function"
                }
            ],
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/utils.js",
            "line": 146,
            "description": "Sleep for a set time",
            "itemtype": "method",
            "name": "sleep",
            "params": [
                {
                    "name": "delay",
                    "description": "Number of ms to wait",
                    "type": "Int"
                }
            ],
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/utils.js",
            "line": 164,
            "description": "Resolves a value according to run-mode",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "value",
                    "description": "Value to resolve",
                    "type": "*"
                }
            ],
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/utils.js",
            "line": 178,
            "description": "Loads contents of a file",
            "itemtype": "method",
            "name": "loadFileContent",
            "params": [
                {
                    "name": "path",
                    "description": "Path to file to load",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/utils.js",
            "line": 197,
            "description": "Executes a pre-defined script from the scripts folder",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the script (without .js)",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Arguments for script",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Utils",
            "module": "WebDriver",
            "submodule": "Utils"
        },
        {
            "file": "lib/when.js",
            "line": 12,
            "description": "When promise is fulfilled, then execute callback",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "WindowHandler",
            "module": "WebDriver"
        },
        {
            "file": "lib/when.js",
            "line": 59,
            "description": "Test whether a value is a promise or not",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "WindowHandler",
            "module": "WebDriver"
        },
        {
            "file": "lib/window.js",
            "line": 29,
            "description": "Logs a method call by an event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "_logMethodCall",
            "access": "private",
            "tagname": "",
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 42,
            "description": "Performs a context dependent JSON request for the current session.\nThe result is parsed for errors.",
            "itemtype": "method",
            "name": "_requestJSON",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 62,
            "description": "Gets the driver object.\nDirect-access. No need to wait.",
            "return": {
                "description": "",
                "type": "Driver"
            },
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 73,
            "description": "Get the value of the element id.\nDirect-access. No need to wait.",
            "itemtype": "method",
            "name": "id",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 84,
            "description": "Get the value of the element id.\nShould the id resolve to 'current', then it will request the actual id.",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 100,
            "description": "Activate the current window",
            "itemtype": "method",
            "name": "activate",
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 114,
            "description": "Get the size of a window",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "`{width: number, height: number}`",
                "type": "Object"
            },
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 124,
            "description": "Get the size of a window",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 138,
            "description": "Maximize a window",
            "itemtype": "method",
            "name": "maximize",
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 148,
            "description": "Get the position of a window",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "`{x: number, y: number}`",
                "type": "Object"
            },
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "lib/window.js",
            "line": 158,
            "description": "Position a window",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "WindowHandler",
            "module": "WebDriver",
            "submodule": "Navigation"
        },
        {
            "file": "index.js",
            "line": 55,
            "itemtype": "property",
            "name": "ActiveWindow",
            "type": "{ActiveWindow}",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 61,
            "itemtype": "property",
            "name": "Alert",
            "type": "{Alert}",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 67,
            "itemtype": "property",
            "name": "Browser",
            "type": "Browser",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 73,
            "itemtype": "property",
            "name": "Chain",
            "type": "Chain",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 79,
            "itemtype": "property",
            "name": "Cookie",
            "type": "Cookie",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 85,
            "itemtype": "property",
            "name": "CookieStorage",
            "type": "CookieStorage",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 91,
            "itemtype": "property",
            "name": "Driver",
            "type": "Driver",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 97,
            "itemtype": "property",
            "name": "Element",
            "type": "Element",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 103,
            "itemtype": "property",
            "name": "Frame",
            "type": "Frame",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 109,
            "itemtype": "property",
            "name": "GlobalMouse",
            "type": "GlobalMouse",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 115,
            "itemtype": "property",
            "name": "GlobalTouch",
            "type": "GlobalTouch",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 121,
            "itemtype": "property",
            "name": "IME",
            "type": "IME",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 127,
            "itemtype": "property",
            "name": "Keys",
            "type": "Keys",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 133,
            "itemtype": "property",
            "name": "LocalStorage",
            "type": "LocalStorage",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 139,
            "itemtype": "property",
            "name": "LogEntry",
            "type": "LogEntry",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 145,
            "itemtype": "property",
            "name": "Mouse",
            "type": "Mouse",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 151,
            "itemtype": "property",
            "name": "Navigator",
            "type": "Navigator",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 157,
            "itemtype": "property",
            "name": "Session",
            "type": "Session",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 163,
            "itemtype": "property",
            "name": "SessionStorage",
            "type": "SessionStorage",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 169,
            "itemtype": "property",
            "name": "Status",
            "type": "Status",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 175,
            "itemtype": "property",
            "name": "TimeOut",
            "type": "TimeOut",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 181,
            "itemtype": "property",
            "name": "Touch",
            "type": "Touch",
            "class": "taxi",
            "module": "taxi"
        },
        {
            "file": "index.js",
            "line": 187,
            "itemtype": "property",
            "name": "WindowHandler",
            "type": "WindowHandler",
            "class": "taxi",
            "module": "taxi"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/helpers/comparison.js:98"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/helpers/stitching.js:144"
        },
        {
            "message": "unknown tag: methods",
            "line": " lib/chain.js:1720"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/compatibility/nightwatch.js:61"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/helpers/comparison.js:66"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/helpers/devicePixelRatio.js:64"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/helpers/screenshot.js:65"
        },
        {
            "message": "Missing item type\nApplies all areas selected to be blocked-out",
            "line": " lib/helpers/screenshot.js:459"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/helpers/stitching.js:64"
        },
        {
            "message": "Missing item type\nProcesses the exception handling of stitching determination\n\nNote:\n  Overwrite this method if you want to change the stitching behavior of browsers.",
            "line": " lib/helpers/stitching.js:144"
        },
        {
            "message": "Missing item type\nMoves document to a specified offset (instead of really scrolling)",
            "line": " lib/scripts/screenshot.js:91"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/activeWindow.js:64"
        },
        {
            "message": "Missing item type\nConvert code to string before execution",
            "line": " lib/activeWindow.js:568"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/alert.js:61"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/browser.js:88"
        },
        {
            "message": "Missing item type\nExecutes a script or function within the active browser window, returning the results",
            "line": " lib/chain.js:1720"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/compatibility.js:61"
        },
        {
            "message": "Missing item type\nParse a response, throwing errors if the status suggests it",
            "line": " lib/connection.js:143"
        },
        {
            "message": "Missing item type\nGets the next available screenshot id",
            "line": " lib/connection.js:228"
        },
        {
            "message": "Missing item type\nTurns a selenium stack-trace into a string",
            "line": " lib/connection.js:242"
        },
        {
            "message": "Missing item type\nCreate connection object according to mode-type",
            "line": " lib/connection.js:261"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/cookieStorage.js:65"
        },
        {
            "message": "Missing item type\nExtract a session ID and the accepted capabilities from a server response",
            "line": " lib/driver.js:709"
        },
        {
            "message": "Missing item type\nSetup debug output",
            "line": " lib/driver.js:731"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/element.js:151"
        },
        {
            "message": "Missing item type\nList of errors",
            "line": " lib/errors.js:13"
        },
        {
            "message": "Missing item type\nExtracts the error message from a response body",
            "line": " lib/errors.js:49"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/frame.js:60"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/globalMouse.js:62"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/globalTouch.js:59"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/ime.js:59"
        },
        {
            "message": "Missing item type\nParse a JSON string to a js-value\n\nNote: Small wrapper around standard JSON parser",
            "line": " lib/json.js:18"
        },
        {
            "message": "Missing item type\nConvert a js-value to a JSON string",
            "line": " lib/json.js:39"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/localStorage.js:59"
        },
        {
            "message": "Missing item type\nWraps every method in an object with a logger",
            "line": " lib/log.js:14"
        },
        {
            "message": "Missing item type\nWraps one method with a function that logs input and output",
            "line": " lib/log.js:34"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/mouse.js:94"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/navigator.js:60"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/sessionStorage.js:59"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/timeOut.js:106"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/touch.js:62"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/utils.js:62"
        },
        {
            "message": "Missing item type\nWaits until an event occurs or the time runs out",
            "line": " lib/utils.js:73"
        },
        {
            "message": "Missing item type\nExecutes a pre-defined script from the scripts folder",
            "line": " lib/utils.js:197"
        },
        {
            "message": "Missing item type\nWhen promise is fulfilled, then execute callback",
            "line": " lib/when.js:12"
        },
        {
            "message": "Missing item type\nTest whether a value is a promise or not",
            "line": " lib/when.js:59"
        },
        {
            "message": "Missing item type\nGets the driver object.\nDirect-access. No need to wait.",
            "line": " lib/window.js:62"
        }
    ]
}